*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.21" SourceFile="foxrefresults.scx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="2" />

	*<PropValue>
		DataSource = .NULL.
		Height = 200
		Left = 1
		Name = "Dataenvironment"
		Top = 220
		Width = 520
	*</PropValue>

ENDDEFINE

DEFINE CLASS frmfoxrefresults AS cfoxrefform OF "foxctrls.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOpen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOpenDropdown" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdResults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRefresh" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpSplitter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oBrowser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrEvent" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReplace" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrint" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExport" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdHelp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="shpSplitterHor" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: clearnode
		*m: clearresults
		*m: collapseall
		*m: copyreference		&& Copy reference to clipboard.
		*m: cvtdatetime
		*m: deselectall
		*m: expandall
		*m: expandnode
		*m: exportresults
		*m: getclassmethoddescription
		*m: gettempalias
		*m: globalreplace
		*m: gotodefinition
		*m: gotoreference
		*m: isitemschecked
		*m: loadresults
		*m: onsortby
		*m: options
		*m: printresults
		*m: refreshresults
		*m: resizeform
		*m: resultsrightclickmenu
		*m: saveformat
		*m: saveposition
		*m: search
		*m: selectall
		*m: setfont
		*m: setreftable
		*m: showdetail
		*m: showhelp
		*m: showrightclickmenu
		*m: sortby
		*m: striptabs
		*m: switchpanes
		*m: synctree
		*m: togglealwaysontop
		*m: togglecolumn
		*m: toggledetails
		*m: togglesortmostrecent
		*m: treerightclickmenu
		*m: updatecheckmarks
		*m: updatecontrols
		*m: updategrid
		*p: ccurrentfileid
		*p: ccurrentreftype
		*p: ccurrentsetid
		*p: cevent
		*p: cfontface
		*p: cfontstyle
		*p: cprojectfile
		*p: creftable
		*p: csortby
		*p: csortcolumns
		*p: csortextracolumns
		*p: linevent
		*p: lnonodeclick
		*p: lpopupset
		*p: lshowcolumnabstract
		*p: lshowcolumnsymbol
		*p: lshowdistinctmethodline		&& Show method/line separate from class name.
		*p: lshowfilename
		*p: lshowrefsperline
		*p: ncolfilenamewidth
		*p: nfilecnt
		*p: nfilenamecolumnorder
		*p: nfontsize
		*p: nrefcnt
		*p: ofoxref
	*</DefinedPropArrayMethod>

	*<PropValue>
		Caption = "References"
		ccurrentfileid = 
		ccurrentreftype = 
		ccurrentsetid = 
		cevent = 
		cfontface = Tahoma
		cfontstyle = N
		cprojectfile = 
		creftable = 
		cresourceid = FOXREF
		csortby = FILENAME
		csortcolumns = 
		csortextracolumns = 
		DataSession = 2
		DoCreate = .T.
		Height = 383
		HelpContextID = 1231100
		KeyPreview = .T.
		Left = 15
		LockScreen = .F.
		lshowcolumnabstract = .T.
		lshowcolumnsymbol = .T.
		lshowfilename = .T.
		MinHeight = 200
		MinWidth = 200
		Name = "frmFoxRefResults"
		ncolfilenamewidth = 0
		nfilecnt = 0
		nfilenamecolumnorder = 3
		nfontsize = 8
		nrefcnt = 0
		ofoxref = .NULL.
		ShowTips = .T.
		Top = 4
		Width = 729
	*</PropValue>

	ADD OBJECT 'cmdExport' AS cfoxbutton WITH ;
		Caption = " \<Export", ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdExport", ;
		SpecialEffect = 2, ;
		StatusBarText = "Export results", ;
		TabIndex = 7, ;
		ToolTipText = "Export Results", ;
		Top = 1, ;
		Width = 71
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFind' AS cfoxbutton WITH ;
		Caption = " \<Search", ;
		Height = 22, ;
		Left = 48, ;
		Name = "cmdFind", ;
		SpecialEffect = 2, ;
		StatusBarText = "Perform a new search", ;
		TabIndex = 3, ;
		ToolTipText = "New Search", ;
		Top = 1, ;
		Width = 57
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdHelp' AS cfoxbutton WITH ;
		Caption = " \<Help", ;
		Height = 22, ;
		Left = 466, ;
		Name = "cmdHelp", ;
		SpecialEffect = 2, ;
		StatusBarText = "Code References Help", ;
		TabIndex = 9, ;
		ToolTipText = "Code References Help", ;
		Top = 1, ;
		Width = 71
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpen' AS commandbutton WITH ;
		Caption = "", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 3, ;
		Name = "cmdOpen", ;
		Picture = bitmaps\open.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 1, ;
		ToolTipText = "Open", ;
		Top = 1, ;
		Width = 22, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpenDropdown' AS commandbutton WITH ;
		Caption = "", ;
		Height = 22, ;
		Left = 25, ;
		Name = "cmdOpenDropdown", ;
		Picture = bitmaps\downarrow.bmp, ;
		SpecialEffect = 2, ;
		TabIndex = 2, ;
		Top = 1, ;
		Width = 14, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOptions' AS cfoxbutton WITH ;
		Caption = " \<Options", ;
		Height = 22, ;
		Left = 394, ;
		Name = "cmdOptions", ;
		SpecialEffect = 2, ;
		StatusBarText = "Display the options dialog", ;
		TabIndex = 8, ;
		ToolTipText = "Code References Options", ;
		Top = 1, ;
		Width = 71
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrint' AS cfoxbutton WITH ;
		Caption = " \<Print", ;
		Height = 22, ;
		Left = 250, ;
		Name = "cmdPrint", ;
		SpecialEffect = 2, ;
		StatusBarText = "Print results", ;
		TabIndex = 6, ;
		ToolTipText = "Print Results", ;
		Top = 1, ;
		Width = 71
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRefresh' AS cfoxbutton WITH ;
		Caption = " Re\<fresh", ;
		Height = 22, ;
		Left = 106, ;
		Name = "cmdRefresh", ;
		SpecialEffect = 2, ;
		StatusBarText = "Refresh the currently selected result set", ;
		TabIndex = 4, ;
		ToolTipText = "Refresh", ;
		Top = 1, ;
		Width = 71
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdReplace' AS cfoxbutton WITH ;
		Caption = " \<Replace", ;
		Height = 22, ;
		Left = 178, ;
		Name = "cmdReplace", ;
		SpecialEffect = 2, ;
		StatusBarText = "Search & replace selected items", ;
		TabIndex = 5, ;
		ToolTipText = "Replace", ;
		Top = 1, ;
		Width = 71
		*< END OBJECT: ClassLib="foxctrls.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdResults' AS cresultsallgrid WITH ;
		Height = 271, ;
		Left = 182, ;
		Name = "grdResults", ;
		TabIndex = 11, ;
		Top = 25, ;
		Width = 545, ;
		COLFILENAME.Header1.Name = "Header1", ;
		COLFILENAME.Name = "COLFILENAME", ;
		COLFILENAME.Text1.Name = "Text1", ;
		colClassMethod.Header1.Name = "Header1", ;
		colClassMethod.Name = "colClassMethod", ;
		colClassMethod.Text1.Name = "Text1", ;
		colCode.Header1.Name = "Header1", ;
		colCode.Name = "colCode", ;
		colCode.Text1.Name = "Text1", ;
		colCheckbox.chkSelected.Name = "chkSelected", ;
		colCheckbox.Header1.Alignment = 2, ;
		colCheckbox.Header1.Name = "Header1", ;
		colCheckbox.Name = "colCheckbox", ;
		colCheckbox.Text1.Name = "Text1", ;
		colSymbol.Header1.Caption = "#", ;
		colSymbol.Header1.FontCharSet = 0, ;
		colSymbol.Header1.FontName = "Tahoma", ;
		colSymbol.Header1.Name = "Header1", ;
		colSymbol.Name = "colSymbol", ;
		colSymbol.Text1.Name = "Text1", ;
		colMethod.Header1.Name = "Header1", ;
		colMethod.Name = "colMethod", ;
		colMethod.Text1.Name = "Text1", ;
		colMethod.Text1.Visible = .F., ;
		colLine.Header1.Name = "Header1", ;
		colLine.Name = "colLine", ;
		colLine.Text1.Name = "Text1", ;
		colLine.Text1.Visible = .F.
		*< END OBJECT: ClassLib="foxref.vcx" BaseClass="grid" />

	ADD OBJECT 'oBrowser' AS cwebbrowser WITH ;
		Height = 83, ;
		Left = 2, ;
		Name = "oBrowser", ;
		TabIndex = 12, ;
		Top = 299, ;
		Width = 725
		*< END OBJECT: ClassLib="foxref.vcx" BaseClass="olecontrol" OLEObject="c:\winnt\system32\shdocvw.dll" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALD2BtaSN8QBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAAAAAAAwh+VaICjTQEalrAMBP1wWiTAAAAO5KAACUCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkAGQAZQBkAAEAAIBvAG8AbABzAFwARQBWAEIAXABkAGUAdgBjAHQAcgBsAHMAXABtAHMAYwBlAHQAYQBiAHMAdAByAGkAcAABAAAA4NBXAHM1zxGuaQgAKy4SYggAAAAAAAAATAAAAAEUAgAAAAAAwAAAAAAAAEaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAA5ADkAMAAwADAAQwB9ACAARQA6AFwAVwBJAE4ATgBUAFwAUwB5AHMAdABlAG0AMwAyAFwAQwBGAEYASQBMAEUAfgAxAC4ARABMAEwAAABDAEYAUwBvAHUAcgBjAGUAQwBvAG4AdAByAG8AbAAgAEMAbwBuAHQAcgBvAGwACQB7ADEAMgA4ADgAMwA0AEEAMQAtADIANgA0ADYALQAxADEARAAxAC0AOQA0ADkAOQAtADAAMABBADAAMgA0ADcAOAAzADUARAA3AH0AIABFADoAXABXAA==" />

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Height = 271, ;
		Left = 2, ;
		Name = "oTree", ;
		TabIndex = 10, ;
		Top = 25, ;
		Width = 172
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALD2BtaSN8QBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACQBAAAAAAAABwAAAAIAAAD+////BAAAAAUAAAAGAAAACQAAAAgAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAADHEQAAAhwAALE8wWoBAAYAIgAAADkAAAAJAQAACgAAAPmgGAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEwAEEANAA1AEQAQgA0AEYALQBCAEQAMABEAC0AMQAxAEQAMgABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAkQAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAAoAAABMaW5lU3R5bGUACQAAAEkKAAAAAQAAAA0AAABNb3VzZVBvaW50ZXIACQAAAEkKAAAAAAAAAA4AAABQYXRoU2VwYXJhdG9yAAoAAABIAAAAAAEAAABcBgAAAFN0eWxlAAkAAABJCgAAAAYAAAAMAAAAT0xFRHJhZ01vZGUACQAAAEkKAAAAAAAAAAwAAABPTEVEcm9wTW9kZQAJAAAAAAAFAMiiGAAGAGkAAAAAAAUAAIDQ6RIAAQAAAFwAH97svQEABQDZ6RIAA1LjC5GPzhGd4wCqAEu4UQEAAACQAURCAQAGVGFob21hAQAAAAD4AxMA+AMTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJCgAAAAAAAAAOAAAARnVsbFJvd1NlbGVjdAAFAAAATAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgBdAQABFgBjAG0AYwB0AGwAMQA5ADgALgBjAGgAbQAAAHQAaQBjAAAAAABsAAAAPwBjAQAACABAnxcAcAMTAAAAAAAAAAAAkAEAAAAAAAADAgFCRWR3YXJkaWFuIFNjcmlwdCBJVEMAZ2h0AOOLANDpEgAEAAAACQAJAAABCAApAAAAEAAAAAAAAAAAAAAAkAEAAAAAAAADAgESRWxlcGhhbnQAIFNjcmlwdCBJVEMAZ2h0AOOLANDpEgAEAAAACQASAAABCAAlAAAAGQAAAAAAAAAAAAAA9AEAAAAAAAADAgESRW5ncmF2ZXJzIE1UAGlwdCBJVEMAZ2h0AOOLANDpEgAEAAAACQAbAAABCAAlAAAAEAAAAAAAAAAAAAAA" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 20, ;
		Left = 43, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 2, ;
		Width = 2
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpSplitter' AS shape WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 287, ;
		Left = 176, ;
		MousePointer = 9, ;
		Name = "shpSplitter", ;
		Top = 25, ;
		Width = 4
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'shpSplitterHor' AS shape WITH ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		Height = 4, ;
		Left = 2, ;
		MousePointer = 7, ;
		Name = "shpSplitterHor", ;
		Top = 295, ;
		Width = 726
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'tmrEvent' AS timer WITH ;
		Enabled = .F., ;
		Height = 23, ;
		Interval = 5, ;
		Left = 672, ;
		Name = "tmrEvent", ;
		Top = 0, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE Activate
		DODEFAULT()
		
		PUBLIC _oFoxRef
		_oFoxRef = THISFORM
		
		
	ENDPROC

	PROCEDURE clearnode
		IF !EMPTY(THISForm.cCurrentSetID)
			THIS.ClearResults()
		ENDIF
	ENDPROC

	PROCEDURE clearresults
		* Abstract:
		*   Clear one or all result sets.
		*
		* Parameters:
		*	[lClearAll] = TRUE to clear all result sets
		#include "foxref.h"
		LPARAMETERS lClearAll
		LOCAL cAlias
		LOCAL i
		LOCAL oSelectedNode
		
		IF lClearAll AND MESSAGEBOX(CLEARALL_LOC, MB_ICONQUESTION + MB_YESNO, CLEARALL_CAPTION_LOC) == IDNO
			RETURN
		ENDIF
		
		* close the FoxRef table if it's open
		cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
		IF USED(cAlias)
			USE IN (cAlias)
		ENDIF
		
		IF lClearAll
			IF THIS.oFoxRef.ClearResults()
				THIS.SetRefTable()
			ENDIF
		ELSE
			IF THIS.oFoxRef.ClearResults(THIS.cCurrentSetID, THIS.cCurrentFileID)
				FOR i = 1 TO THIS.oTree.Nodes.Count
					IF SUBSTR(THIS.oTree.Nodes.Item(i).Key, 3, 10) == THIS.cCurrentSetID
						* go to sibling node
						oSelectedNode = THIS.oTree.Nodes.Item(i).Next
						IF VARTYPE(oSelectedNode) <> 'O'
							oSelectedNode = THIS.oTree.Nodes.Item(i).Previous
						ENDIF
						IF VARTYPE(oSelectedNode) <> 'O'
							oSelectedNode = THIS.oTree.Nodes(1)
						ENDIF
						THIS.oTree.SelectedItem = oSelectedNode
						THIS.oTree.Nodes.Remove(i)
						THIS.oTree.SelectedItem.EnsureVisible()
						THIS.UpdateGrid()
						EXIT
					ENDIF
				ENDFOR
			ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE collapseall
		#include "foxref.h"
		* Collapse all nodes in the tree
		LOCAL i
		FOR i = 2 TO THIS.oTree.Nodes.Count
			THIS.oTree.Nodes.Item(i).Expanded = .F.
		ENDFOR
	ENDPROC

	PROCEDURE copyreference		&& Copy reference to clipboard.
		* Abstract:
		*   Copy current reference to clipboard.
		*
		* Parameters:
		*	[lRightPane] = TRUE if called from right-click menu of right-hand pane
		#include "foxref.h"
		LPARAMETERS lRightPane
		LOCAL cRefID
		
		IF lRightPane
			* if clicked on a particular reference and selected "copy",
			* then we only want to copy that single reference to
			* the clipboard
			THIS.oFoxRef.ExportReferences(EXPORTTYPE_CLIPBOARD, '', '', '', FoxRefCursor.RefID, .F.)
		ELSE
			THIS.oFoxRef.ExportReferences(EXPORTTYPE_CLIPBOARD, '', THIS.cCurrentSetID, THIS.cCurrentFileID, '', .F.)
		ENDIF
		
	ENDPROC

	PROCEDURE cvtdatetime
	ENDPROC

	PROCEDURE Deactivate
		LOCAL cAlias
		
		IF VARTYPE(THIS.oFoxRef) == 'O'
			cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
			IF USED(cAlias)
				USE IN (cAlias)
			ENDIF
		ENDIF
		
		DoDefault()
		
	ENDPROC

	PROCEDURE deselectall
		* Abstract:
		*   Remove checkmarks from all matches 
		*	in the current set.
		*
		* Parameters:
		*	[lAllResultSets] = TRUE to clear all result sets, not just displayed on
		LPARAMETERS lAllResultSets
		LOCAL nRecNo
		LOCAL nSelect
		LOCAL cAlias
		
		nSelect = SELECT()
		
		IF lAllResultSets
			UPDATE (THIS.oFoxRef.RefTable) SET Checked = .F. WHERE !ISNULL(Checked) AND Checked
		ENDIF
		
		IF USED("FoxRefCursor")
			SELECT FoxRefCursor
			m.nRecNo = IIF(EOF() OR BOF(), 0, RECNO())
			REPLACE ALL Checked WITH .F. FOR !ISNULL(Checked) IN FoxRefCursor
			IF m.nRecNo <> 0
				GOTO (m.nRecNo) IN FoxRefCursor
			ENDIF
		ENDIF
		
		SELECT (m.nSelect)
		
	ENDPROC

	PROCEDURE Destroy
		THIS.SaveFormat()
		THIS.SavePosition()
		
		DODEFAULT()
		
		
	ENDPROC

	PROCEDURE expandall
		* Expand all nodes in the tree
		LOCAL i
		FOR i = 1 TO THIS.oTree.Nodes.Count
			THIS.ExpandNode(THIS.oTree.Nodes.Item(i))
		ENDFOR
		THIS.oTree.SelectedItem.EnsureVisible()
	ENDPROC

	PROCEDURE expandnode
		* Expand a Search Set node
		#include "foxref.h"
		#define tvwFirst	0
		#define tvwLast		1
		#define tvwNext		2
		#define tvwPrevious	3
		#define tvwChild	4
		LPARAMETERS oNode
		LOCAL nSelect
		LOCAL cSetID
		
		nSelect = SELECT()
		
		cSetID = CHRTRANC(oNode.Tag, '!', '')
		IF !EMPTY(cSetID)
		
			IF !oNode.Expanded
				oNode.Expanded = .T.
			ENDIF
		
			* if tag is empty, this means the parent
			* has never been loaded with its children
			* or is being forced to be refreshed
			IF RIGHT(oNode.Tag, 1) <> '!'
				* remove all children except the temp node
				FOR i = oNode.Children TO 1 STEP -1
					THIS.oTree.Nodes.Remove(oNode.Child.Key)
				ENDFOR
		
				* set the Tag so we don't try to reload children again
				oNode.Tag = oNode.Tag + '!'
		
		
				SELECT DISTINCT SetID, FileID, Filename, PADR(Folder, 254) AS Folder, RefType ;
				 FROM (THIS.oFoxRef.FileTable) FileTable INNER JOIN (THIS.oFoxRef.RefTable) RefTable ON FileTable.UniqueID == RefTable.FileID ;
				 WHERE SetID == cSetID AND RefType == REFTYPE_RESULT AND !RefTable.Inactive ;
				 ORDER BY Filename ;
				 INTO CURSOR TreeExpandCursor
				WITH THIS.oTree
					SCAN ALL
						.Nodes.Add(REFTYPE_SEARCH + '1' + TreeExpandCursor.SetID, tvwChild, TreeExpandCursor.RefType + '2' + TreeExpandCursor.SetID + TreeExpandCursor.FileID, JUSTFNAME(TreeExpandCursor.Filename))
					ENDSCAN
				ENDWITH
			ENDIF
		ENDIF
		
		SELECT (nSelect)
		
	ENDPROC

	PROCEDURE exportresults
		* Abstract:
		*   Display Export dialog.
		*
		* Parameters:
		*	None
		THIS.UpdateCheckMarks(.F.)
		DO FORM FoxRefExport WITH THIS.oFoxRef, THIS.cCurrentSetID
		
	ENDPROC

	PROCEDURE getclassmethoddescription
		#include "foxref.h"
		LPARAMETERS lProcNameOnly
		LOCAL lNoClassProc
		
		IF EOF("FoxRefCursor")
			RETURN ''
		ELSE
			IF lProcNameOnly
				RETURN FoxRefCursor.ClassName + IIF(FoxRefCursor.FindType == FINDTYPE_PROPERTYNAME, '.' + PEMNAME_LOC, '') + ;
				 IIF('.' $ FoxRefCursor.ProcName, '.' + JUSTSTEM(FoxRefCursor.ProcName), '')
			ELSE
				m.lNoClassProc = EMPTY(FoxRefCursor.ClassName) AND EMPTY(FoxRefCursor.ProcName)
				RETURN FoxRefCursor.ClassName + IIF(EMPTY(FoxRefCursor.ClassName) OR EMPTY(FoxRefCursor.ProcName), '', '.') + FoxRefCursor.ProcName + IIF(FoxRefCursor.FindType == FINDTYPE_PROPERTYNAME, '.' + PEMNAME_LOC, '') + IIF(FoxRefCursor.ProcLineNo == 0, '', ;
				 IIF(INLIST(FoxRefCursor.FindType, FINDTYPE_NAME, FINDTYPE_PROPERTYNAME, FINDTYPE_PROPERTYVALUE, FINDTYPE_EXPR, FINDTYPE_OTHER), '', IIF(m.lNoClassProc, '', ", ") + LTRIM(STR(FoxRefCursor.ProcLineNo, 8, 0))))
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE gettempalias
		* Return a temp alias name given a table name
		LPARAMETERS cTableName
		LOCAL cAlias
		
		m.cAlias = JUSTSTEM(m.cTableName)
		IF !ISALPHA(LEFT(m.cAlias, 1))
			m.cAlias = "A" + m.cAlias
		ENDIF
		
		RETURN m.cAlias
	ENDPROC

	PROCEDURE globalreplace
		* Abstract:
		*   For all references that are checked, replace
		*	with the specified new text.
		*
		* Parameters:
		*   None
		#include "foxref.h"
		#include "foxpro.h"
		
		LOCAL lSuccess
		LOCAL nSelect
		LOCAL cSetID
		LOCAL cRefType
		LOCAL ARRAY aNoReplaceCnt[1]
		LOCAL ARRAY aChecked[1]
		
		nSelect = SELECT()
		
		THIS.UpdateCheckMarks(.F.)
		SELECT CNT(*) ;
		 FROM (THIS.oFoxRef.RefTable) ;
		 WHERE Checked AND !Inactive ;
		 INTO ARRAY aChecked
		IF _TALLY == 0 OR aChecked[1] == 0
			MESSAGEBOX(REPLACE_NOCHECKS_LOC, MB_ICONEXCLAMATION, REPLACE_LOC)
		ELSE
			
			* if any files are checked that we don't support replacement on,
			* then warn the user now
			SELECT CNT(*) ;
			  FROM (THIS.oFoxRef.RefTable) ;
			  WHERE Checked AND !Inactive AND NoReplace ;
			  INTO ARRAY aNoReplaceCnt
			IF _TALLY > 0 AND aNoReplaceCnt[1] > 0
				IF MessageBox(REPLACE_NOTSUPPORTED1_LOC + CHR(10) + CHR(10) + REPLACE_NOTSUPPORTED2_LOC + CHR(10) + CHR(10) + CONTINUE_LOC, MB_ICONQUESTION + MB_YESNO, REPLACE_LOC) == IDNO
					SELECT (nSelect)
					RETURN
				ENDIF
			ENDIF
			
			DO FORM FoxRefReplace WITH THIS.oFoxRef TO lSuccess
		
			THIS.oFoxRef.SavePrefs()
			IF lSuccess
				IF MessageBox(REPLACE_REFRESH_LOC, MB_ICONQUESTION + MB_YESNO, REPLACE_LOC) == IDYES
					THIS.RefreshResults(.T.)
				ENDIF
			ENDIF
		
			IF THIS.oFoxRef.DisplayReplaceLog AND !EMPTY(THIS.oFoxRef.ReplaceLogSetID)
				cRefType = REFTYPE_LOG
				cSetID = THIS.oFoxRef.ReplaceLogSetID
			ELSE
				cRefType = THIS.cCurrentRefType
				cSetID   = THIS.cCurrentSetID
			ENDIF
			THIS.SetRefTable(,,.T.)
			THIS.LoadResults(cRefType, cSetID, THIS.cCurrentFileID,, .T.)
			THIS.SyncTree()
		ENDIF
		
		SELECT (nSelect)
		
	ENDPROC

	PROCEDURE gotodefinition
		* Abstract:
		*   Goto a definition, or if multiple are
		*	defined ask which one to go to.
		*
		* Parameters:
		*	None
		#include "foxref.h"
		#include "foxpro.h"
		LOCAL nPos
		LOCAL nLen
		LOCAL cFindSymbol
		LOCAL nMouse
		
		m.nMouse = THISFORM.MousePointer
		THISFORM.MousePointer = MOUSE_HOURGLASS
		
		IF USED("FoxRefCursor") AND !EOF("FoxRefCursor") AND !BOF("FoxRefCursor")
			THIS.oFoxRef.CollectDefinitions()
			THIS.oFoxRef.GotoSymbol(FoxRefCursor.Symbol, ADDBS(RTRIM(FoxRefCursor.Folder)) + RTRIM(FoxRefCursor.Filename), RTRIM(FoxRefCursor.ClassName), RTRIM(FoxRefCursor.ProcName))
		ENDIF
		
		THISFORM.MousePointer = m.nMouse
	ENDPROC

	PROCEDURE gotoreference
		* Abstract:
		*   Goto (open) the selected reference.
		*
		* Parameters:
		*	None
		CLEAR TYPEAHEAD
		
		IF USED("FoxRefCursor") AND !EOF("FoxRefCursor") AND !BOF("FoxRefCursor")
			THIS.oFoxRef.GotoReference(FoxRefCursor.UniqueID)
		ENDIF
			
		
	ENDPROC

	PROCEDURE Init
		#include "foxref.h"
		LPARAMETERS oFoxRef
		LOCAL cRefTable, cSetID
		LOCAL lSortMostRecentFirst
		
		SET TALK OFF
		SET DELETED ON
		DODEFAULT()
		
		* For VFP 8, add pictures to the buttons
		THIS.cmdFind.AutoSize = .T.
		THIS.cmdFind.Picture = "bitmaps\find.bmp"
		THIS.cmdFind.PicturePosition = 1
		
		THIS.cmdRefresh.AutoSize = .T.
		THIS.cmdRefresh.Picture = "bitmaps\refresh.bmp"
		THIS.cmdRefresh.PicturePosition = 1
		
		THIS.cmdReplace.AutoSize = .T.
		THIS.cmdReplace.Picture = "bitmaps\replace.bmp"
		THIS.cmdReplace.PicturePosition = 1
		
		THIS.cmdPrint.AutoSize = .T.
		THIS.cmdPrint.Picture = "bitmaps\print.bmp"
		THIS.cmdPrint.PicturePosition = 1
		
		THIS.cmdExport.AutoSize = .T.
		THIS.cmdExport.Picture = "bitmaps\export.bmp"
		THIS.cmdExport.PicturePosition = 1
		
		THIS.cmdOptions.AutoSize = .T.
		THIS.cmdOptions.Picture = "bitmaps\propsht.bmp"
		THIS.cmdOptions.PicturePosition = 1
		
		THIS.cmdHelp.AutoSize = .T.
		THIS.cmdHelp.Picture = "bitmaps\refhelp.bmp"
		THIS.cmdHelp.PicturePosition = 1
		
		THIS.cmdRefresh.Left = THIS.cmdFind.Left + THIS.cmdFind.Width
		THIS.cmdReplace.Left = THIS.cmdRefresh.Left + THIS.cmdRefresh.Width
		THIS.cmdPrint.Left   = THIS.cmdReplace.Left + THIS.cmdReplace.Width
		THIS.cmdExport.Left  = THIS.cmdPrint.Left + THIS.cmdPrint.Width
		THIS.cmdOptions.Left = THIS.cmdExport.Left + THIS.cmdExport.Width
		THIS.cmdHelp.Left    = THIS.cmdOptions.Left + THIS.cmdOptions.Width
		
		THIS.oBrowser.nBackColor = THIS.BackColor
		THIS.oBrowser.Write("<p>&nbsp;</p>")
		
		* XP Themes are enabled on machine & turned on within VFP
		IF SYS(2700) == '1' AND _SCREEN.Themes
			THIS.oTree.Appearance = 0  && flat
		ELSE
			THIS.oTree.Appearance = 1  && 3d
		ENDIF
		
		lSortMostRecentFirst = .F.
		
		* Get options that were saved to resource file
		* (note that form size is taken care of by the parent class)
		IF VARTYPE(THIS.oResourceOptions) == 'O'
			WITH THIS.oResourceOptions
				THIS.shpSplitter.Left   = NVL(.Get("SplitterLeft"), THIS.shpSplitter.Left)
				THIS.shpSplitterHor.Top = NVL(.Get("SplitterHorTop"), THIS.shpSplitterHor.Top)
				THIS.AlwaysOnTop        = NVL(.Get("AlwaysOnTop"), THIS.AlwaysOnTop)
				THIS.oBrowser.Visible   = NVL(.Get("ShowDescriptions"), THIS.oBrowser.Visible)
				THIS.cSortBy            = NVL(.Get("SortBy"), THIS.cSortBy)
				lSortMostRecentFirst    = NVL(.Get("SortMostRecentFirst"), lSortMostRecentFirst)
			ENDWITH
		ENDIF
		
		IF VARTYPE(oFoxRef) == 'O'
			THIS.oFoxRef = oFoxRef
		ELSE
			THIS.oFoxRef = NEWOBJECT("FoxRef", "FoxRefEngine.prg", .NULL., .T.)
			THIS.oFoxRef.SetProject()
		ENDIF
		THIS.oFoxRef.SortMostRecentFirst = lSortMostRecentFirst
		
		THIS.SortBy(THIS.cSortBy, .T.)  && setup default sorting
		THIS.ResizeForm(.T.)
		
		THIS.Visible = .T.
		THIS.SetRefTable(THIS.oFoxRef.cSetID, .T.)
		
		
		THIS.SetFont()
		
		BINDEVENT(THIS, "OnSortBy", THIS, "SortBy")
		
	ENDPROC

	PROCEDURE isitemschecked
		* Abstract:
		*   Return TRUE if any items in FoxRefCursor
		* 	are checked.  This is used to determine
		*	if "Deselect All" should be enabled on
		*	the rightclick menu.
		*
		* Parameters:
		*	None
		LOCAL nRecNo
		LOCAL nSelect
		LOCAL lYes
		
		m.lYes = .F.
		IF USED("FoxRefCursor")
			m.nSelect = SELECT()
			SELECT FoxRefCursor
			m.nRecNo = IIF(EOF() OR BOF(), 0, RECNO())
			LOCATE FOR Checked
			m.lYes = FOUND()
			IF m.nRecNo <> 0
				GOTO (m.nRecNo) IN FoxRefCursor
			ENDIF
			SELECT (m.nSelect)
		ENDIF
		
		RETURN m.lYes
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		LOCAL nTop
		LOCAL nLeft
		
		DO CASE
		CASE nKeyCode = 27	&& ESC
			THISFORM.Release
		CASE nKeyCode = -4	&& F5
			THISFORM.RefreshResults()
		CASE nKeyCode = -5	&& F6 - switch panes
			THISFORM.SwitchPanes()
		CASE (nKeyCode = 93 and nShiftAltCtrl = 1) OR (nKeyCode = 160 and nShiftAltCtrl = 4)	&& shortcut menu
			THIS.ScaleMode = 0
			nTop = WLROW(THISFORM.Name) + THIS.grdResults.Top + ((SYSMETRIC(9) + SYSMETRIC(4)) / FONTMETRIC(1))
			nLeft = WLCOL(THISFORM.Name) + THIS.grdResults.Left + (SYSMETRIC(3) / FONTMETRIC(6))
			THIS.ScaleMode = 3
		
			THISFORM.ShowRightClickMenu(nTop, nLeft)
		ENDCASE
		
		*!*	DODEFAULT(nKeyCode, nShiftAltCtrl)
	ENDPROC

	PROCEDURE Load
		DODEFAULT()
		
		* just a temporary placeholder cursor
		* so our grid has something to bind to
		CREATE CURSOR FoxRefCursor ( ;
		  UniqueID C(10), ;
		  RefCnt I, ;
		  RefID C(10), ;
		  Folder C(1), ;
		  Filename C(1), ;
		  LineNo I, ;
		  ProcLineNo I, ;
		  RefType C(1), ;
		  Classname C(1), ;
		  ProcName C(1), ;
		  Abstract C(1), ;
		  Checked L ;
		 )
		
		
	ENDPROC

	PROCEDURE loadresults
		* Abstract:
		*   Populate grid with the results.
		*
		* Parameters:
		*	[cRefType]   = Reference type: Search Set (REFTYPE_SEARCH) or Log (REFTYPE_LOG)
		*	[cSetID]     = to only show matches for a specific search set
		*	[cFileID]    = to only show matches for a specific file
		*	[lFirstTime] = true if this is our first time setting (so don't save grid position)
		*	[lNoSaveCheckmarks] = true to not save checkmarks
		#include "foxpro.h"
		#include "foxref.h"
		LPARAMETERS cRefType, cSetID, cFileID, lFirstTime, lNoSaveCheckmarks
		
		LOCAL i
		LOCAL cColumn
		LOCAL nSelect
		LOCAL nMouse
		LOCAL lLockScreen
		LOCAL nLeftPos, nTopPos, nColWidth2, nColWidth3, nColWidth4, nColWidth5
		LOCAL cSortColumns
		LOCAL lDeleteFileColumn
		LOCAL cSortExtraColumns
		LOCAL ARRAY aColumnOrder[1]
		LOCAL ARRAY aFileCnt[1]
		
		nSelect = SELECT()
		
		nMouse = THIS.MousePointer
		THIS.MousePointer = MOUSE_HOURGLASS 
		
		lLockScreen = THIS.LockScreen
		THIS.LockScreen = .T.
		
		
		THIS.cCurrentSetID  = ''
		THIS.cCurrentFileID = ''
		
		IF VARTYPE(cRefType) <> 'C' OR EMPTY(cRefType)
			cRefType = THIS.cCurrentRefType
		ELSE
			THIS.cCurrentRefType = cRefType
		ENDIF
		
		IF VARTYPE(cSetID) <> 'C'
			cSetID = ''
		ENDIF
		
		
		IF cRefType == REFTYPE_LOG
			* Display the replacement log in a browser window where
			* the results grid usually is
			THIS.cCurrentSetID = cSetID
		
			THIS.grdResults.Visible = .F.
			IF TYPE("THIS.oLogBrowser") == 'U'
				THIS.NewObject("oLogBrowser", "CWebBrowser", "FoxRef.vcx")
				THIS.oLogBrowser.cFontFace = THIS.cFontFace
				THIS.oLogBrowser.nFontSize = THIS.nFontSize + 3
			ENDIF
			THIS.oLogBrowser.Move(THIS.grdResults.Left, THIS.grdResults.Top, THIS.grdResults.Width, THIS.grdResults.Height)
		
			SELECT Abstract ;
			 FROM (THIS.oFoxRef.RefTable) RefTable ;
			 WHERE ;
			  SetID == cSetID AND ;
			  RefType == REFTYPE_LOG AND ;
			  !RefTable.Inactive ;
			 INTO CURSOR FoxCodeCursor
			IF _TALLY > 0 
				cHTML = THIS.oLogBrowser.GetFontTag() + STRTRAN(FoxCodeCursor.Abstract, CHR(13) + CHR(10), "<br>") + [</font>]
			ELSE
				cHTML = ''
			ENDIF
			IF EMPTY(cHTML)
				THIS.oLogBrowser.Write([<p>&nbsp;</p>])
			ELSE
				THIS.oLogBrowser.Write(cHTML)
			ENDIF
		
			THIS.oLogBrowser.Visible = .T.
		ELSE
			* Display results grid
			IF VARTYPE(THIS.oLogBrowser) == 'O'
				THIS.oLogBrowser.Visible = .F.
			ENDIF
		
			cSortColumns = THIS.cSortColumns
		
			IF THIS.lShowFilename AND TYPE("THIS.grdResults.colFilename") == 'O' AND !ISNULL(THIS.grdResults.colFilename)
				THIS.nColFilenameWidth = THIS.grdResults.colFilename.Width
			ENDIF
			nColWidth2 = 0
			nColWidth3 = 0
			nColWidth4 = 0
			nColWidth5 = 0
		
			IF TYPE("THIS.grdResults") == 'O' AND !ISNULL(THIS.grdResults)
				IF THIS.grdResults.ColumnCount > 0
					IF TYPE("THIS.grdResults.colClassMethod.Width") == 'N'
						nColWidth2 = THIS.grdResults.colClassMethod.Width
					ENDIF
					
					IF TYPE("THIS.grdResults.colCode.Width") == 'N'
						nColWidth3 = THIS.grdResults.colCode.Width
					ENDIF
		
					IF TYPE("THIS.grdResults.colMethod.Width") == 'N'
						nColWidth4 = THIS.grdResults.colMethod.Width
					ENDIF
		
					IF TYPE("THIS.grdResults.colLine.Width") == 'N'
						nColWidth5 = THIS.grdResults.colLine.Width
					ENDIF
				ENDIF
		
				nLeftPos   = THIS.grdResults.Left
				nTopPos    = THIS.grdResults.Top
		
				IF !lFirstTime
					THIS.SaveFormat()
		
					IF THIS.lShowFilename
						THIS.nFilenameColumnOrder = THIS.grdResults.colFilename.ColumnOrder
					ENDIF
				ENDIF
				THIS.RemoveObject("grdResults")
			ELSE
				nLeftPos   = 182
				nTopPos    = 26
			ENDIF
		
			* save the current state of what files are checked
			IF !lNoSaveCheckmarks
				THIS.UpdateCheckMarks(.F.)
			ENDIF
		
			IF VARTYPE(THIS.oFoxRef) == 'O'
				THIS.lShowRefsPerLine = THIS.oFoxRef.ShowRefsPerLine
				THIS.lShowDistinctMethodLine = THIS.oFoxRef.ShowDistinctMethodLine
			ENDIF
		
			cSortExtraColumns = THIS.cSortExtraColumns
			IF !EMPTY(cSortExtraColumns)
				cSortExtraColumns = ", " + cSortExtraColumns
			ENDIF
		
		
			* The GROUP BY clause in the below queries ensures that we
			* only include a result once even if it occurs more than once 
			* on a particular line
		
			LOCAL lnSaveSYS3099 
			lnSaveSYS3099=SYS(3099) 
			SYS(3099, 70) 
		
		
			IF !EMPTY(cSetID)
				cSetID = PADR(cSetID, 10)
				THIS.cCurrentSetID = cSetID
		
				IF VARTYPE(cFileID) == 'C' AND !EMPTY(cFileID)
					THIS.cCurrentFileID = cFileID
					
					* all matches for a specific set and filename
					SELECT ;
					  CNT(*) AS RefCnt, ;
					  RefTable.*, ;
					  FileTable.Filename, ;
					  FileTable.Folder, ;
					  PADR(FileTable.Folder, 240) AS SortFolder, ;
					  LOWER(PADR(JUSTEXT(FileTable.Filename), 3)) AS SortFileType ;
					  &cSortExtraColumns ;
					 FROM (THIS.oFoxRef.RefTable) RefTable INNER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
					 WHERE ;
					   RefTable.SetID == cSetID AND ;
					   RefTable.FileID == cFileID AND ;
					   RefTable.RefType == REFTYPE_RESULT AND ;
					   !RefTable.Inactive ;
					 ORDER BY &cSortColumns ;
					 GROUP BY RefTable.RefID ;
					 INTO CURSOR FoxRefCursor READWRITE
				ELSE
					* all matches for a specific set
					SELECT ;
					  CNT(*) AS RefCnt, ;
					  RefTable.*, ;
					  FileTable.Filename, ;
					  FileTable.Folder, ;
					  PADR(FileTable.Folder, 240) AS SortFolder, ;
					  LOWER(PADR(JUSTEXT(Filename), 3)) AS SortFileType ;
					  &cSortExtraColumns ;
					 FROM (THIS.oFoxRef.RefTable) RefTable INNER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
					 WHERE ;
					  RefTable.SetID == cSetID AND ;
					  RefTable.RefType == REFTYPE_RESULT AND ;
					  !RefTable.Inactive ;
					 ORDER BY &cSortColumns ;
					 GROUP BY RefTable.RefID ;
					 INTO CURSOR FoxRefCursor READWRITE
				ENDIF
			ELSE
				* all matches
				SELECT ;
				  CNT(*) AS RefCnt, ;
				  RefTable.*, ;
				  FileTable.Filename, ;
				  FileTable.Folder, ;
				  PADR(FileTable.Folder, 240) AS SortFolder, ;
				  LOWER(PADR(JUSTEXT(Filename), 3)) AS SortFileType ;
				  &cSortExtraColumns ;
				 FROM (THIS.oFoxRef.RefTable) RefTable INNER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
				 WHERE ;
				  RefTable.RefType == REFTYPE_RESULT AND ;
				  !RefTable.Inactive ;
				 ORDER BY &cSortColumns ;
				 GROUP BY RefID ;
				 INTO CURSOR FoxRefCursor READWRITE
			ENDIF
		
		
			IF EMPTY(THIS.cCurrentFileID)
				SELECT CNT(*) FROM FoxRefCursor GROUP BY FileID INTO ARRAY aFileCnt
				IF _TALLY == 0 OR aFileCnt[1] == 0
					THIS.nFileCnt = 0
				ELSE
					THIS.nFileCnt = _TALLY
				ENDIF
			ELSE
				THIS.nFileCnt = 1
			ENDIF
		
			SYS(3099, lnSaveSYS3099) 
		
		
		
			SELECT FoxRefCursor
			SUM RefCnt ALL TO THIS.nRefCnt
			LOCATE
		
		
			lDeleteFileColumn = .F.
			IF TYPE("THIS.grdResults") <> 'O' OR ISNULL(THIS.grdResults)
				THIS.NewObject("grdResults", "CResultsAllGrid", "FoxRef.vcx")
				THIS.lShowFilename = EMPTY(THIS.cCurrentFileID)
				IF !THIS.lShowFilename
					lDeleteFileColumn = .T.
				ENDIF
		
				THIS.grdResults.Left = nLeftPos
				THIS.grdResults.Top  = nTopPos
				* THIS.grdResults.LockColumns = 1
		
				THIS.ResizeForm(.T.)
				THIS.SetFont()
			ENDIF
		
			THIS.grdResults.ColCheckbox.Header1.Picture = "check.bmp"
		
			IF THIS.nColFilenameWidth > 0 AND TYPE("THIS.grdResults.colFilename") == 'O' AND !ISNULL(THIS.grdResults.colFilename)
				THIS.grdResults.colFilename.Width = THIS.nColFilenameWidth
			ENDIF
			IF nColWidth2 > 0 AND TYPE("THIS.grdResults.colClassMethod") == 'O' AND !ISNULL(THIS.grdResults.colClassMethod)
				THIS.grdResults.colClassMethod.Width = nColWidth2
			ENDIF
			IF nColWidth3 > 0 AND TYPE("THIS.grdResults.colCode") == 'O' AND !ISNULL(THIS.grdResults.colCode)
				THIS.grdResults.colCode.Width = nColWidth3
			ENDIF
		
			IF nColWidth4 > 0 AND TYPE("THIS.grdResults.colMethod") == 'O' AND !ISNULL(THIS.grdResults.colMethod)
				THIS.grdResults.colMethod.Width = nColWidth4
			ENDIF
			IF nColWidth5 > 0 AND TYPE("THIS.grdResults.colLine") == 'O' AND !ISNULL(THIS.grdResults.colLine)
				THIS.grdResults.colLine.Width = nColWidth5
			ENDIF
		
		
			IF VARTYPE(THIS.oResourceOptions) == 'O'
				DIMENSION aColumnOrder[7, 2]
				aColumnOrder = 0
				aColumnOrder[1,1] = "colCheckbox"
				aColumnOrder[2,1] = "colSymbol"
				aColumnOrder[3,1] = "colFilename"
				aColumnOrder[4,1] = "colClassMethod"
				aColumnOrder[5,1] = "colMethod"
				aColumnOrder[6,1] = "ColLine"
				aColumnOrder[7,1] = "colCode"
		
				WITH THIS.oResourceOptions
					aColumnOrder[1, 2] = NVL(.Get("CheckboxColumnOrder"), 0)
					aColumnOrder[2, 2] = NVL(.Get("SymbolColumnOrder"), 0)
					aColumnOrder[3, 2] = IIF(THIS.lShowFilename, NVL(.Get("FilenameColumnOrder"), 0), THIS.nFilenameColumnOrder)
					aColumnOrder[4, 2] = NVL(.Get("ClassMethodColumnOrder"), 0)
					aColumnOrder[5, 2] = NVL(.Get("MethodColumnOrder"), 0)
					aColumnOrder[6, 2] = NVL(.Get("LineColumnOrder"), 0)
					aColumnOrder[7, 2] = NVL(.Get("CodeColumnOrder"), 0)
				ENDWITH
				=ASORT(aColumnOrder, 2, -1, 1)
			ENDIF
		
			IF lDeleteFileColumn
				THIS.grdResults.DeleteColumn(THIS.grdResults.colFilename.ColumnOrder)
			ENDIF
		
			IF THIS.lShowDistinctMethodLine
				THIS.grdResults.colClassMethod.Header1.Caption = CLASS_HEADER_LOC
			ELSE
				THIS.grdResults.DeleteColumn(THIS.grdResults.colMethod.ColumnOrder)
				THIS.grdResults.DeleteColumn(THIS.grdResults.colLine.ColumnOrder)
			ENDIF
		
			IF !THIS.lShowRefsPerLine
				THIS.grdResults.DeleteColumn(THIS.grdResults.colSymbol.ColumnOrder)
			ENDIF
		
			THIS.grdResults.Visible = .T.
			DOEVENTS
			CLEAR TYPEAHEAD
		ENDIF
		
		THIS.ShowDetail(IIF(EMPTY(cSetID), "ALL", cSetID), .T.)
		
		THIS.LockScreen = lLockScreen
		THIS.MousePointer = nMouse
		
		
		SELECT (nSelect)
		
	ENDPROC

	PROCEDURE onsortby
		* SortBy() is the actual method that does the sort.
		* This is called by the grids when a header is clicked
		* and we used BindEvents to hook into it.
		* We can't call SortBy() directly because we need to
		* destroy and re-create the grid, and we can't do that
		* if an event associated with the grid is still in the 
		* call stack.
		LPARAMETERS cColumn
		
		
	ENDPROC

	PROCEDURE options
		* Abstract:
		*   Display Options dialog.
		*
		* Parameters:
		*	None
		LOCAL cFoxRefDirectory
		
		* close tables in case they select "Cleanup" and we need
		* exclusive access to them
		IF USED(JUSTFNAME(THIS.oFoxRef.RefTable))
			USE IN (JUSTFNAME(THIS.oFoxRef.RefTable))
		ENDIF
		IF USED(JUSTFNAME(THIS.oFoxRef.FileTable))
			USE IN (JUSTFNAME(THIS.oFoxRef.FileTable))
		ENDIF
		
		cFoxRefDirectory = THIS.oFoxRef.FoxRefDirectory
		
		DO FORM FoxRefOptions WITH THIS.oFoxRef
		IF !(m.cFoxRefDirectory == THIS.oFoxRef.FoxRefDirectory)
			THIS.SetRefTable()
		ENDIF
		THIS.SetFont()
		THIS.LoadResults(THIS.cCurrentRefType, THIS.cCurrentSetID, THIS.cCurrentFileID)
		
		
	ENDPROC

	PROCEDURE printresults
		* Abstract:
		*   Print references.
		*
		* Parameters:
		*	None
		LOCAL lAlwaysOnTop
		
		THIS.UpdateCheckMarks()
		
		lAlwaysOnTop = THIS.AlwaysOnTop
		THIS.AlwaysOnTop = .F.
		DO FORM FoxRefPrint WITH THIS.oFoxRef, THIS.cCurrentSetID, THIS.cSortColumns
		THIS.AlwaysOnTop = lAlwaysOnTop
		
		
		 
	ENDPROC

	PROCEDURE refreshresults
		* Abstract:
		*   Refresh current result set.
		*
		* Parameters:
		*   [lNoLoadResults]
		LPARAMETERS lNoLoadResults
		LOCAL cAlias
		
		* close the FoxRef table if it's open
		cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
		IF USED(cAlias)
			USE IN (cAlias)
		ENDIF
		
		THIS.oFoxRef.RefreshResults(THIS.cCurrentSetID)
		IF !lNoLoadResults
			THIS.SetRefTable(THIS.cCurrentSetID)
		ENDIF
		
	ENDPROC

	PROCEDURE Resize
		THIS.ResizeForm()
		
	ENDPROC

	PROCEDURE resizeform
		* Abstract:
		*   Adjust size of the tree control and the list control
		*	based upon the size of the form and the sizer control.
		*
		* Parameters:
		*	None
		LPARAMETERS lSplitter
		LOCAL lLockScreen
		LOCAL nBottom, nWidth, nLeft, nHeight, nTop
		
		lLockScreen = THISFORM.LockScreen
		THISFORM.LockScreen = .T.
		
		IF lSplitter
			nWidth  = THIS.Width - 2
			nLeft   = THIS.oBrowser.Left
			nTop    = THIS.shpSplitterHor.Top + 2
			nHeight = THIS.Height - nTop - 1
		ELSE
			nWidth  = THIS.Width - 2
			nLeft   = THIS.oBrowser.Left
			nTop    = MAX(THIS.Height - THIS.oBrowser.Height - 1, 50)
			nHeight = THIS.oBrowser.Height
			
			THIS.shpSplitterHor.Top = nTop - 2
		ENDIF
		
		IF nLeft <> THIS.oBrowser.Left OR nTop <> THIS.oBrowser.Top OR nWidth <> THIS.oBrowser.Width OR nHeight <> THIS.oBrowser.Height
			THIS.oBrowser.Move(nLeft, nTop, nWidth + 1, nHeight)
			THIS.oBrowser.Move(nLeft, nTop, nWidth, nHeight)
			THIS.oBrowser.Width = THIS.oBrowser.Width
		ENDIF
		IF THIS.oBrowser.Visible
			* nBottom = THIS.oBrowser.Top
			nBottom = THIS.shpSplitterHor.Top + 2
		ELSE
			nBottom = THIS.oBrowser.Top + THIS.oBrowser.Height + 2
		ENDIF
		
		* control position left-to-right
		THIS.grdResults.Left   = THIS.shpSplitter.Left + THIS.shpSplitter.Width
		THIS.grdResults.Width  = THIS.Width - (THIS.grdResults.Left) - 1
		THIS.grdResults.Height = nBottom - THIS.grdResults.Top - 2
		
		THIS.oTree.Width  = THIS.shpSplitter.Left - THIS.oTree.Left
		THIS.oTree.Height = nBottom - THIS.oTree.Top - 2
		
		THIS.shpSplitter.Height = nBottom - THIS.shpSplitter.Top
		THIS.shpSplitterHor.Width = THIS.Width
		
		THIS.MinWidth = THIS.grdResults.Left + 20
		
		IF VARTYPE(THIS.oLogBrowser) == 'O'
			THIS.oLogBrowser.Move(THIS.grdResults.Left, THIS.grdResults.Top, THIS.grdResults.Width, THIS.grdResults.Height)
		ENDIF
		
		THISFORM.LockScreen = lLockScreen
		
	ENDPROC

	PROCEDURE resultsrightclickmenu
		#include "foxref.h"
		LPARAMETERS nRow, nCol
		LOCAL oTempFoxRef
		
		* so that we can use it in our ON SELECTION BAR command
		oTempFoxRef = THISFORM
		
		IF VARTYPE(nRow) <> 'N' OR VARTYPE(nCol) <> 'N'
			nRow = MROW("")
			nCol = MCOL("")
		ENDIF
		
		DEFINE POPUP shortcut SHORTCUT RELATIVE FROM nRow, nCol IN WINDOW "Screen"
		DEFINE BAR 1 OF shortcut PROMPT MENU_OPEN_LOC PICTRES _mfi_open STYLE "B"
		DEFINE BAR 3 OF shortcut PROMPT MENU_COPY_LOC PICTRES _med_copy
		DEFINE BAR 4 OF shortcut PROMPT "\-"
		DEFINE BAR 5 OF shortcut PROMPT MENU_SEARCH_LOC PICTRES _med_find
		DEFINE BAR 6 OF shortcut PROMPT MENU_GLOBALREPLACE_LOC PICTRES _med_repl
		DEFINE BAR 7 OF shortcut PROMPT MENU_REFRESH_LOC PICTURE "bitmaps\refresh.bmp"
		DEFINE BAR 8 OF shortcut PROMPT "\-"
		DEFINE BAR 9 OF shortcut PROMPT MENU_PRINT_LOC PICTRES _mfi_sysprint
		DEFINE BAR 10 OF shortcut PROMPT MENU_EXPORT_LOC PICTURE "bitmaps\export.bmp"
		DEFINE BAR 11 OF shortcut PROMPT "\-"
		DEFINE BAR 12 OF shortcut PROMPT MENU_SELECTALL_LOC
		DEFINE BAR 13 OF shortcut PROMPT MENU_DESELECTALLWIN_LOC
		DEFINE BAR 14 OF shortcut PROMPT MENU_DESELECTALL_LOC
		DEFINE BAR 15 OF shortcut PROMPT MENU_SORT_LOC PICTURE "bitmaps\sortup.bmp"
		DEFINE BAR 16 OF shortcut PROMPT "\-"
		DEFINE BAR 17 OF shortcut PROMPT MENU_OPTIONS_LOC PICTURE "bitmaps\propsht.bmp"
		
		ON SELECTION BAR 1 OF shortcut oTempFoxRef.GotoReference()
		ON SELECTION BAR 3 OF shortcut oTempFoxRef.CopyReference(.T.)
		ON SELECTION BAR 5 OF shortcut oTempFoxRef.Search()
		ON SELECTION BAR 6 OF shortcut oTempFoxRef.GlobalReplace()
		ON SELECTION BAR 7 OF shortcut oTempFoxRef.RefreshResults()
		ON SELECTION BAR 9 OF shortcut oTempFoxRef.PrintResults()
		ON SELECTION BAR 10 OF shortcut oTempFoxRef.ExportResults()
		ON SELECTION BAR 12 OF shortcut oTempFoxRef.SelectAll()
		ON SELECTION BAR 13 OF shortcut oTempFoxRef.DeselectAll()
		ON SELECTION BAR 14 OF shortcut oTempFoxRef.DeselectAll(.T.)
		ON BAR 15 OF shortcut ACTIVATE POPUP sortpopup
		ON SELECTION BAR 17 OF shortcut oTempFoxRef.Options()
		
		DEFINE POPUP sortpopup SHORTCUT RELATIVE
		DEFINE BAR 1 OF sortpopup PROMPT MENUSORT_FILENAME_LOC
		DEFINE BAR 2 OF sortpopup PROMPT MENUSORT_CLASSMETHOD_LOC
		DEFINE BAR 3 OF sortpopup PROMPT MENUSORT_METHOD_LOC
		DEFINE BAR 4 OF sortpopup PROMPT MENUSORT_CHECKED_LOC
		DEFINE BAR 5 OF sortpopup PROMPT MENUSORT_FILETYPE_LOC
		DEFINE BAR 6 OF sortpopup PROMPT MENUSORT_LOCATION_LOC
		
		DO CASE
		CASE THIS.cSortBy == "FILENAME"
			SET MARK OF BAR 1 OF sortpopup TO .T.
		
		CASE THIS.cSortBy == "CLASS"
			SET MARK OF BAR 2 OF sortpopup TO .T.
		
		CASE THIS.cSortBy == "METHOD"
			SET MARK OF BAR 3 OF sortpopup TO .T.
		
		CASE THIS.cSortBy == "CHECKED"
			SET MARK OF BAR 4 OF sortpopup TO .T.
		
		CASE THIS.cSortBy == "FILETYPE"
			SET MARK OF BAR 5 OF sortpopup TO .T.
		
		CASE THIS.cSortBy == "LOCATION"
			SET MARK OF BAR 6 OF sortpopup TO .T.
		
		ENDCASE
		
		ON SELECTION BAR 1 OF sortpopup oTempFoxRef.SortBy("FILENAME")
		ON SELECTION BAR 2 OF sortpopup oTempFoxRef.SortBy("CLASS")
		ON SELECTION BAR 3 OF sortpopup oTempFoxRef.SortBy("METHOD")
		ON SELECTION BAR 4 OF sortpopup oTempFoxRef.SortBy("CHECKED")
		ON SELECTION BAR 5 OF sortpopup oTempFoxRef.SortBy("FILETYPE")
		ON SELECTION BAR 6 OF sortpopup oTempFoxRef.SortBy("LOCATION")
		
		ACTIVATE POPUP shortcut
		
		RELEASE POPUP shortcut
		RELEASE POPUP sortpopup
		
	ENDPROC

	PROCEDURE RightClick
		THISFORM.ShowRightClickMenu()
	ENDPROC

	PROCEDURE saveformat
		* Save form format options to Resource file (FoxUser)
		
		IF VARTYPE(THIS.oResourceOptions) == 'O'
			WITH THIS.oResourceOptions
				.Set("SplitterLeft", THIS.shpSplitter.Left)
				.Set("SplitterHorTop", THIS.shpSplitterHor.Top)
				.Set("ShowDescriptions", THIS.oBrowser.Visible)
				.Set("AlwaysOnTop", THIS.AlwaysOnTop)
				.Set("SortBy", THIS.cSortBy)
				.Set("SortMostRecentFirst", THIS.oFoxRef.SortMostRecentFirst)
		
				IF TYPE("THIS.grdResults.colFilename") == 'O' AND !ISNULL(THIS.grdResults.colFilename) AND THIS.lShowFilename
					.Set("FilenameColumnOrder", THIS.grdResults.colFilename.ColumnOrder)
				ENDIF
				IF TYPE("THIS.grdResults.colCheckbox") == 'O' AND !ISNULL(THIS.grdResults.colCheckBox)
					.Set("CheckboxColumnOrder", THIS.grdResults.colCheckbox.ColumnOrder)
				ENDIF
				IF THIS.lShowRefsPerLine AND TYPE("THIS.grdResults.colSymbol") == 'O' AND !ISNULL(THIS.grdResults.colSymbol)
					.Set("SymbolColumnOrder", THIS.grdResults.colSymbol.ColumnOrder)
				ENDIF
				IF TYPE("THIS.grdResults.colClassMethod") == 'O' AND !ISNULL(THIS.grdResults.colClassMethod)
					.Set("ClassMethodColumnOrder", THIS.grdResults.colClassMethod.ColumnOrder)
				ENDIF
				IF TYPE("THIS.grdResults.colMethod.ColumnOrder") == 'N'
					.Set("MethodColumnOrder", THIS.grdResults.colMethod.ColumnOrder)
				ENDIF
				IF TYPE("THIS.grdResults.colLine.ColumnOrder") == 'N'
					.Set("MethodColumnLine", THIS.grdResults.colLine.ColumnOrder)
				ENDIF
				IF TYPE("THIS.grdResults.colCode") == 'O' AND !ISNULL(THIS.grdResults.colCode)
					.Set("CodeColumnOrder", THIS.grdResults.colCode.ColumnOrder)
				ENDIF
			ENDWITH
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE saveposition
		* save the position, size, etc of the form, splitter bar,
		* and the grid columns to the *_Ref table
		#include "foxref.h"
		LOCAL lInUse
		LOCAL lSuccess
		
		IF VARTYPE(THIS.oFoxRef) == 'O' AND FILE(FORCEEXT(THIS.oFoxRef.RefTable, "DBF"))
			m.lSuccess = .T.
			TRY
				USE (THIS.oFoxRef.RefTable) ALIAS FoxRefSave IN 0 SHARED AGAIN
			CATCH
				m.lSuccess = .F.
			FINALLY
			ENDTRY
		
			IF m.lSuccess
				IF TYPE("FoxRefSave.RefType") == 'C' AND FoxRefSave.RefType == REFTYPE_INIT
					REPLACE Abstract WITH ;
					  TRANSFORM(THIS.Top) + ',' + ;
					  TRANSFORM(THIS.Left) + ',' + ;
					  TRANSFORM(THIS.Height) + ',' + ;
					  TRANSFORM(THIS.Width)  + ',' + ;
					  TRANSFORM(THIS.shpSplitter.Left) + ',' + ;
					  TRANSFORM(THIS.shpSplitterHor.Top) + ',' + ;
					  IIF(TYPE("THIS.grdResults.colFilename.Width") == 'N' AND THIS.lShowFilename, TRANSFORM(THIS.grdResults.colFilename.Width), TRANSFORM(THIS.nColFilenameWidth)) + ',' + ;
					  IIF(TYPE("THIS.grdResults.colClassMethod.Width") == 'N', TRANSFORM(THIS.grdResults.colClassMethod.Width), '0') + ',' + ;
					  IIF(TYPE("THIS.grdResults.colCode.Width") == 'N', TRANSFORM(THIS.grdResults.colCode.Width), '0') + ',' + ;
					  IIF(TYPE("THIS.grdResults.colMethod.Width") == 'N', TRANSFORM(THIS.grdResults.colMethod.Width), '0') + ',' + ;
					  IIF(TYPE("THIS.grdResults.colLine.Width") == 'N', TRANSFORM(THIS.grdResults.colLine.Width), '0') ;
					 IN FoxRefSave
				ENDIF
				
				IF USED("FoxRefSave")
					USE IN FoxRefSave
				ENDIF
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE search
		* Abstract:
		*   Perform a new search and either
		*	append or replace the current sets.
		*
		* Parameters:
		*   None
		LOCAL cAlias
		
		cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
		IF USED(cAlias)
			USE IN (cAlias)
		ENDIF
		
		* DO FoxRefStart WITH THIS.oFoxRef.ProjectFile
		THIS.oFoxRef.Search()
	ENDPROC

	PROCEDURE selectall
		* Abstract:
		*   Put checkmarks next to all matches 
		*	in the current set.
		*
		* Parameters:
		*	None
		LOCAL nRecNo
		LOCAL nSelect
		
		IF USED("FoxRefCursor")
			m.nSelect = SELECT()
			SELECT FoxRefCursor
			m.nRecNo = IIF(EOF() OR BOF(), 0, RECNO())
			REPLACE ALL Checked WITH .T. FOR !ISNULL(Checked) IN FoxRefCursor
			IF m.nRecNo <> 0
				GOTO (m.nRecNo) IN FoxRefCursor
			ENDIF
			* THIS.grdResults.Refresh()
			SELECT (m.nSelect)
		ENDIF
		
		
	ENDPROC

	PROCEDURE setfont
		* Abstract:
		*   Change the font.
		*
		* Parameters:
		*	None
		LPARAMETERS lGetFont
		LOCAL cFontFace, nFontSize, cStyle
		
		IF lGetFont
			cFontString = GETFONT(THIS.cFontFace, THIS.nFontSize, THIS.cFontStyle)
		ELSE
			cFontString = THIS.oFoxRef.FontString
		ENDIF
		
		IF !EMPTY(cFontString)
			cFontFace  = LEFT(cFontString, AT(",", cFontString) - 1)
			nFontSize  = SUBSTR(cFontString, AT(",", cFontString) + 1)
			nFontSize  = VAL(LEFT(nFontSize, AT(",", nFontSize) - 1))
			cFontStyle = SUBSTR(cFontString, AT("," ,cFontString,2) + 1)
			
			THIS.cFontFace  = cFontFace
			THIS.nFontSize  = nFontSize
			THIS.cFontStyle = cFontStyle
		ENDIF
		
		THIS.oTree.Font        = THIS.cFontFace
		THIS.oTree.Font.Size   = THIS.nFontSize
		THIS.oTree.Font.Bold   = 'B' $ THIS.cFontStyle
		THIS.oTree.Font.Italic = 'I' $ THIS.cFontStyle
		
		THIS.grdResults.SetAll("FontName", THIS.cFontFace, "Column")
		THIS.grdResults.SetAll("FontSize", THIS.nFontSize, "Column")
		THIS.grdResults.SetAll("FontBold", 'B'$THIS.cFontStyle, "Column")
		THIS.grdResults.SetAll("FontItalic", 'I'$THIS.cFontStyle, "Column")
		THIS.grdResults.RowHeight = MAX(THIS.nFontSize * 2, 16) + 2
		
		IF THIS.lShowRefsPerLine AND TYPE("THIS.grdResults.colSymbol") == 'O' AND !ISNULL(THIS.grdResults.colSymbol)
			THIS.grdResults.colSymbol.FontName = "WingDings"
			THIS.grdResults.colSymbol.FontSize = MAX(12, THIS.nFontSize)
		ENDIF
		
		THIS.oBrowser.cFontFace = THIS.cFontFace
		THIS.oBrowser.nFontSize = THIS.nFontSize + 3
		
		IF TYPE("THIS.oLogBrowser") == 'O' AND !ISNULL(THIS.oLogBrowser)
			THIS.oLogBrowser.cFontFace = THIS.cFontFace
			THIS.oLogBrowser.nFontSize = THIS.nFontSize + 3
		ENDIF
		
		
		
	ENDPROC

	PROCEDURE setreftable
		* add a reference table to our list
		#include "foxref.h"
		#define tvwFirst	0
		#define tvwLast		1
		#define tvwNext		2
		#define tvwPrevious	3
		#define tvwChild	4
		LPARAMETERS cSetID, lSetWindowPos, lNoLoadResults
		
		LOCAL cRefTable
		LOCAL cFileTable
		LOCAL cAlias
		LOCAL oNode
		LOCAL nPos
		LOCAL cNodeText
		LOCAL lLockScreen
		LOCAL cOrderBy
		LOCAL ARRAY aRefInit[1]
		
		IF VARTYPE(cSetID) <> 'C'
			cSetID = ''
		ENDIF
		
		THIS.Caption = RESULTSTITLE_LOC + IIF(THIS.oFoxRef.ProjectFile == PROJECT_GLOBAL, '', ' - ' + JUSTFNAME(THIS.oFoxRef.ProjectFile))
		
		lLockScreen = THISFORM.LockScreen
		THISFORM.LockScreen = .T.
		
		* cRefTable = THIS.cRefTable
		cRefTable  = THIS.oFoxRef.RefTable
		cFileTable = THIS.oFoxRef.FileTable
		IF FILE(FORCEEXT(cRefTable, "DBF"))
			SELECT Abstract ;
			 FROM (cRefTable) RefTable ;
			 WHERE RefType == REFTYPE_INIT AND !RefTable.Inactive ; 
			 INTO ARRAY aRefInit
			IF _TALLY > 0 AND !EMPTY(aRefInit[1,1]) AND lSetWindowPos
				* first record should always be the initialization record
				* that defines our window position, etc
				THIS.Top    = VAL(GETWORDNUM(aRefInit[1,1], 1, ','))
				THIS.Left   = VAL(GETWORDNUM(aRefInit[1,1], 2, ','))
				THIS.Height = VAL(GETWORDNUM(aRefInit[1,1], 3, ','))
				THIS.Width  = VAL(GETWORDNUM(aRefInit[1,1], 4, ','))
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 5, ','))
				THIS.shpSplitter.Left = IIF(nPos < 20, THIS.shpSplitter.Left, nPos)
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 6, ','))
				THIS.shpSplitterHor.Top = IIF(nPos < 100 OR nPos > THIS.Height, THIS.shpSplitterHor.Top, nPos)
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 7, ','))
				IF THIS.lShowFilename AND TYPE("THIS.grdResults.colFilename") == 'O' AND !ISNULL(THIS.grdResults.colFilename)
					THIS.grdResults.colFilename.Width = IIF(nPos > 0, nPos, THIS.grdResults.colFilename.Width)
				ENDIF
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 8, ','))
				IF TYPE("THIS.grdResults.colClassMethod") == 'O' AND !ISNULL(THIS.grdResults.colClassMethod)
					THIS.grdResults.colClassMethod.Width = IIF(nPos > 0, nPos, THIS.grdResults.colClassMethod.Width)
				ENDIF
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 9, ','))
				IF TYPE("THIS.grdResults.colCode") == 'O' AND !ISNULL(THIS.grdResults.colCode)
					THIS.grdResults.colCode.Width = IIF(nPos > 0, nPos, THIS.grdResults.colCode.Width)
				ENDIF
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 10, ','))
				IF TYPE("THIS.grdResults.colMethod") == 'O' AND !ISNULL(THIS.grdResults.colMethod)
					THIS.grdResults.colMethod.Width = IIF(nPos > 0, nPos, THIS.grdResults.colMethod.Width)
				ENDIF
		
				nPos = VAL(GETWORDNUM(aRefInit[1,1], 11, ','))
				IF TYPE("THIS.grdResults.colLine") == 'O' AND !ISNULL(THIS.grdResults.colLine)
					THIS.grdResults.colLine.Width = IIF(nPos > 0, nPos, THIS.grdResults.colLine.Width)
				ENDIF
		
			ENDIF
			
			IF THIS.oFoxRef.SortMostRecentFirst
				cOrderBy = "ORDER BY Timestamp DESC"
			ELSE
				cOrderBy = ''
			ENDIF
		
			WITH THIS.oTree
				.Nodes.Clear()
				
				oNode = .Nodes.Add(,,REFTYPE_SEARCH + '0', ALLRESULTS_LOC)
				oNode.Bold = .T.
				oNode.Expanded = .T.
				oNode.Selected = .T.
		
				SELECT SetID, Symbol, RefType ;
				 FROM (cRefTable) RefTable ;
				 WHERE ;
				   RefType == REFTYPE_SEARCH AND ;
				   !RefTable.Inactive ; 
				 &cOrderBy ;
				 INTO CURSOR TreeLoadCursor
				SCAN ALL
					cNodeText = TreeLoadCursor.Symbol
		
					oNode = .Nodes.Add(REFTYPE_SEARCH + '0', tvwChild, TreeLoadCursor.RefType + '1' + TreeLoadCursor.SetID, cNodeText)
					oNode.Tag = TreeLoadCursor.SetID
					oNode.Bold = .T.
					IF !EMPTY(cSetID) AND TreeLoadCursor.SetID == cSetID
						oNode.Expanded = .T.
						oNode.Selected = .T.
						
						THIS.ExpandNode(oNode)
					ELSE
						oNode.Expanded = .F. && EMPTY(cSetID)
						
						oNode = .Nodes.Add(REFTYPE_SEARCH + '1' + TreeLoadCursor.SetID, tvwChild, TreeLoadCursor.RefType + '2' + TreeLoadCursor.SetID + "temp", NODE_LOADING_LOC)
						oNode.Tag = "temp"
					ENDIF
				ENDSCAN	
		
		
		*!*			SELECT DISTINCT SetID, FileID, Filename, PADR(Folder, 254) AS Folder, RefType ;
		*!*			 FROM (cFileTable) FileTable INNER JOIN (cRefTable) RefTable ON FileTable.UniqueID == RefTable.FileID ;
		*!*			 WHERE RefType == REFTYPE_RESULT AND !RefTable.Inactive ;
		*!*			 ORDER BY Filename ;
		*!*			 INTO CURSOR TreeLoadCursor
		*!*			SCAN ALL
		*!*				oNode = .Nodes.Add(REFTYPE_SEARCH + '1' + TreeLoadCursor.SetID, tvwChild, TreeLoadCursor.RefType + '2' + TreeLoadCursor.SetID + TreeLoadCursor.FileID, JUSTFNAME(TreeLoadCursor.Filename))
		*!*			ENDSCAN
		
				SELECT SetID, Symbol, RefType ;
				 FROM (cRefTable) RefTable ;
				 WHERE ;
				   RefType == REFTYPE_LOG AND ;
				   !RefTable.Inactive ; 
				 &cOrderBy ;
				 INTO CURSOR TreeLoadCursor
				IF _TALLY > 0
					* add in any replacement logs
					oNode = .Nodes.Add(,,REFTYPE_LOG + '0', ALLLOGS_LOC)
					oNode.Bold = .T.
					oNode.Expanded = .T.
		
					SCAN ALL
						cNodeText = EVL(TreeLoadCursor.Symbol, EMPTYTEXT_LOC)
						oNode = .Nodes.Add(REFTYPE_LOG + '0', tvwChild, TreeLoadCursor.RefType + '1' + TreeLoadCursor.SetID, cNodeText)
					ENDSCAN
				ENDIF
			ENDWITH
		
			IF !lNoLoadResults
				THIS.UpdateCheckMarks(.T.)
				THIS.LoadResults(,cSetID,, lSetWindowPos)
			ENDIF
		
			cAlias = THIS.GetTempAlias(cRefTable)
			IF USED(cAlias)
				USE IN (cAlias)
			ENDIF
		ENDIF
		
		THIS.UpdateControls()
		
		THISFORM.LockScreen = lLockScreen
	ENDPROC

	PROCEDURE showdetail
		* Abstract:
		*   Show the code where the reference was found
		*	in the browser window
		*
		* Parameters:
		*	[cSetID] = show information on file rather than code references
		*	[lShowSummary] = TRUE to show summary info rather than Abstract
		#include "foxref.h"
		LPARAMETERS cSetID, lShowSummary
		LOCAL nSelect
		LOCAL cHTML
		LOCAL cHTMLCode
		LOCAL cHTMLErrors
		LOCAL nSelect
		LOCAL cOptions
		LOCAL cSummary
		LOCAL nCnt
		LOCAL i
		LOCAL cHTMLFragment
		LOCAL ARRAY aPropInfo[1]
		
		IF !THIS.oBrowser.Visible
			RETURN
		ENDIF
		
		cHTML = ''
		cHTMLErrors = ''
		
		IF VARTYPE(cSetID) <> 'C'
			cSetID = THIS.cCurrentSetID
		ENDIF
		
		nSelect = SELECT()
		
		
		IF THIS.oTree.Nodes.Count > 1
			IF THIS.cCurrentRefType == REFTYPE_LOG
				IF cSetID <> "ALL"
					SELECT ;
					  RefTable.Symbol, ;
					  RefTable.TimeStamp ;
					 FROM (THIS.oFoxRef.RefTable) RefTable ;
					 WHERE ;
					   SetID == cSetID AND ;
					   RefType == REFTYPE_LOG AND ;
					   !RefTable.Inactive ;
					 INTO CURSOR FoxCodeCursor
					IF _TALLY > 0
						cHTML = cHTML + [<div><table border="0" cellspacing="1" cellpadding="0">] + ;
						 [<tr><td><b>] + THIS.oBrowser.GetFontTag() + REPLACEMENTTEXT_LOC + [:</font></b></td><td>] + THIS.oBrowser.GetFontTag() + [&nbsp;] + FoxCodeCursor.Symbol + [</font></td></tr>] + ;
						 [<tr><td><b>] + THIS.oBrowser.GetFontTag() + DATETIME_LOC + [:</font></b></td><td>] + THIS.oBrowser.GetFontTag() + [&nbsp;] + TRANSFORM(FoxCodeCursor.TimeStamp) + [</font></td></tr>] + ;
						 [</table>]
					ENDIF
				ENDIF		
			ELSE
				IF cSetID == "ALL"
					cHTML = cHTML + ;
					  "<b>" + THIS.oBrowser.GetFontTag() + ALLRESULTS_LOC + "</font></b>"
				ELSE
					SELECT ;
					  RefTable.RefType, ;
					  RefTable.Abstract, ;
					  RefTable.Symbol, ;
					  RefTable.ClassName, ;
					  FileTable.Folder, ;
					  FileTable.Filename, ;
					  PADR(FileTable.Folder, 240) AS SortFolder ;
					 FROM (THIS.oFoxRef.RefTable) RefTable LEFT OUTER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
					 WHERE ;
					   SetID == cSetID AND ;
					   (RefType == REFTYPE_SEARCH OR RefType == REFTYPE_ERROR) AND ;
					   !RefTable.Inactive ;
					 ORDER BY SortFolder, Filename ;
					 INTO CURSOR FoxCodeCursor
		
					LOCATE FOR RefType == REFTYPE_SEARCH
					IF FOUND()
						cHTML = cHTML + [<div><table border="0" cellspacing="1" cellpadding="0">]
						IF THIS.oFoxRef.ProjectFile == PROJECT_GLOBAL
							cHTML = cHTML + "<tr><td><b>" + THIS.oBrowser.GetFontTag() + FOLDER_LOC + ":</font></b></td><td>" + THIS.oBrowser.GetFontTag() + [&nbsp;] + RTRIM(FoxCodeCursor.ClassName) + "</font></td></tr>"
						ELSE
							cHTML = cHTML + "<tr><td><b>" + THIS.oBrowser.GetFontTag() + PROJECT_LOC + ":</font></b></td><td>" + THIS.oBrowser.GetFontTag() + [&nbsp;] + RTRIM(FoxCodeCursor.ClassName) + "</font></td></tr>"
						ENDIF
		
						* show the search criteria
						cOptions = THIS.oFoxRef.ParseAbstract(FoxCodeCursor.Abstract, "CRITERIA")
						cHTML = cHTML + ;
						  "<tr><td><b>" + THIS.oBrowser.GetFontTag() + SEARCHOPTIONS_LOC + ":</font></b></td><td>" + THIS.oBrowser.GetFontTag() + ;
						  [&nbsp;] + THIS.oBrowser.HTMLEncode(IIF(EMPTY(cOptions), '', cOptions + " - ") + ;
						  THIS.oFoxRef.ParseAbstract(FoxCodeCursor.Abstract, "FILETYPES")) + ;
						  "</font></td></tr>"
						cHTML = cHTML + [</table></div>]
					ENDIF
		
					IF lShowSummary AND EMPTY(THIS.cCurrentFileID)
						* gather any errors encountered
						SELECT FoxCodeCursor
						SCAN ALL FOR RefType == REFTYPE_ERROR
							cHTMLErrors = cHTMLErrors + ;
							 [<div nowrap style="text-indent:15">] + ;
							 IIF(ISNULL(FoxCodeCursor.Filename), '', ADDBS(RTRIM(FoxCodeCursor.Folder)) + RTRIM(FoxCodeCursor.Filename) + ": ") + ;
							 FoxCodeCursor.Abstract + [</div>]
						ENDSCAN
					ENDIF
				ENDIF
		
				IF lShowSummary
					IF EMPTY(THIS.cCurrentFileID)
						DO CASE
						CASE THIS.nFileCnt == 0 AND THIS.nRefCnt == 0
							cSummary = SUMMARY_NOMATCHES_LOC
		
						CASE THIS.nFileCnt == 1 AND THIS.nRefCnt == 1
							cSummary = SUMMARY4_LOC
		
						CASE THIS.nFileCnt == 1 AND THIS.nRefCnt <> 1
							cSummary = SUMMARY3_LOC
		
						CASE THIS.nFileCnt <> 1 AND THIS.nRefCnt == 1
							cSummary = SUMMARY2_LOC
		
						OTHERWISE			
							cSummary = SUMMARY1_LOC
						ENDCASE
						cSummary = STRTRAN(cSummary, "<FILECNT>", TRANSFORM(THIS.nFileCnt))
					ELSE
						* show summary for a single file
						DO CASE
						CASE THIS.nRefCnt == 1
							cSummary = SUMMARY5_LOC
						OTHERWISE
							cSummary = SUMMARY6_LOC
						ENDCASE
						IF USED("FoxRefCursor") AND !EOF("FoxRefCursor")
							cSummary = STRTRAN(cSummary, "<FILENAME>", ADDBS(RTRIM(FoxRefCursor.Folder)) + RTRIM(FoxRefCursor.Filename))
						ENDIF
					ENDIF
					cSummary = STRTRAN(cSummary, "<MATCHCNT>", TRANSFORM(THIS.nRefCnt))
					
					cHTML = cHTML + IIF(EMPTY(cHTML), '', [<hr>]) + ;
						THIS.oBrowser.GetFontTag() + THIS.oBrowser.HTMLEncode(cSummary) + "</font>"
				ELSE
					cHTMLCode = FoxRefCursor.Abstract
		
					SELECT Symbol, ColPos, MatchLen, ProcLineNo ;
					 FROM (THIS.oFoxRef.RefTable) RefTable ;
					 WHERE ;
					   RefID == FoxRefCursor.RefID AND ;
					   RefType == REFTYPE_RESULT AND ;
					   !RefTable.Inactive ;
					 ORDER BY ProcLineNo DESCEND, ColPos DESCEND ;
					 INTO CURSOR FoxResultsCursor
					IF RECCOUNT("FoxResultsCursor") > 0
		
						IF FoxRefCursor.FindType == FINDTYPE_PROPERTYVALUE
							cHTMLCode = ''
							nCnt = ALINES(aPropInfo, FoxRefCursor.Abstract)
							FOR i = 1 TO nCnt
								cHTMLFragment = aPropInfo[i]
		
								SCAN ALL FOR FoxResultsCursor.ProcLineNo == i
									cHTMLFragment = THIS.oBrowser.HTMLEncode(LEFT(cHTMLFragment, FoxResultsCursor.ColPos - 1)) + [<font color="blue">] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLFragment, FoxResultsCursor.ColPos, FoxResultsCursor.MatchLen)) + [</font>] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLFragment, FoxResultsCursor.ColPos + FoxResultsCursor.MatchLen))
								ENDSCAN
		
								cHTMLCode = cHTMLCode + IIF(i == 1, '', "<br>") + cHTMLFragment
							ENDFOR
						ELSE
							cHTMLCode = THIS.oBrowser.HTMLEncode(LEFT(cHTMLCode, FoxResultsCursor.ColPos - 1)) + [<font color="blue">] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLCode, FoxResultsCursor.ColPos, FoxResultsCursor.MatchLen)) + [</font>] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLCode, FoxResultsCursor.ColPos + FoxResultsCursor.MatchLen))
						ENDIF
					ENDIF
		
					* Display file info
					IF !EMPTY(cHTMLCode)
						cHTML = cHTML + IIF(EMPTY(cHTML), '', [<hr>]) + ;
						 [<div><b>] + ;
						 THIS.oBrowser.HTMLEncode(ADDBS(RTRIM(FoxRefCursor.Folder)) + RTRIM(FoxRefCursor.Filename) + ;
						 " - " + ;
						 THIS.GetClassMethodDescription()) + ;
						 [:</b></div>] + ;
						 [<div nowrap style="text-indent:15">] + cHTMLCode + [</div>]
					ENDIF
		
				ENDIF
		
				IF !EMPTY(cHTMLErrors)
					cHTML = cHTML + [<br><div><b><font color="red">] + ERRORHEADER_LOC + [</font></b></div>] + cHTMLErrors
				ENDIF
			ENDIF
		ENDIF
		
		IF EMPTY(cHTML)
			THIS.oBrowser.Write([<p>&nbsp;</p>])
		ELSE
			THIS.oBrowser.Write(cHTML)
		ENDIF
		
		SELECT (nSelect)
		
	ENDPROC

	PROCEDURE showhelp
		* Abstract:
		*   Display Help for Reference program
		*
		* Parameters:
		*	None
		
		HELP ID THISFORM.HelpContextID 
		
	ENDPROC

	PROCEDURE showrightclickmenu
		#include "foxref.h"
		LPARAMETERS nRow, nCol
		LOCAL oTempFoxRef
		
		* so that we can use it in our ON SELECTION BAR command
		oTempFoxRef = THISFORM
		
		IF VARTYPE(nRow) <> 'N' OR VARTYPE(nCol) <> 'N'
			nRow = MROW("")
			nCol = MCOL("")
		ENDIF
		
		DEFINE POPUP shortcut SHORTCUT RELATIVE FROM nRow, nCol IN WINDOW "Screen"
		
		DEFINE BAR 100 OF shortcut PROMPT MENU_DESCRIPTIONS_LOC
		DEFINE BAR 110 OF shortcut PROMPT MENU_ALWAYSONTOP_LOC
		DEFINE BAR 120 OF shortcut PROMPT "\-"
		DEFINE BAR 140 OF shortcut PROMPT MENU_SEARCH_LOC PICTRES _med_find
		DEFINE BAR 150 OF shortcut PROMPT MENU_REFRESH_LOC PICTURE "bitmaps\refresh.bmp"
		DEFINE BAR 160 OF shortcut PROMPT MENU_GLOBALREPLACE_LOC PICTRES _med_repl
		DEFINE BAR 170 OF shortcut PROMPT "\-"
		DEFINE BAR 180 OF shortcut PROMPT MENU_PRINT_LOC PICTRES _mfi_sysprint
		DEFINE BAR 190 OF shortcut PROMPT MENU_EXPORT_LOC PICTURE "bitmaps\export.bmp"
		DEFINE BAR 200 OF shortcut PROMPT "\-"
		DEFINE BAR 210 OF shortcut PROMPT MENU_OPTIONS_LOC PICTURE "bitmaps\propsht.bmp"
		
		IF THIS.oBrowser.Visible
			SET MARK OF BAR 100 OF shortcut TO .T.
		ENDIF
		IF THIS.AlwaysOnTop
			SET MARK OF BAR 110 OF shortcut TO .T.
		ENDIF
		
		ON SELECTION BAR 100 OF shortcut oTempFoxRef.ToggleDetails()
		ON SELECTION BAR 110 OF shortcut oTempFoxRef.ToggleAlwaysOnTop()
		ON SELECTION BAR 140 OF shortcut oTempFoxRef.Search()
		ON SELECTION BAR 150 OF shortcut oTempFoxRef.RefreshResults()
		ON SELECTION BAR 160 OF shortcut oTempFoxRef.GlobalReplace()
		ON SELECTION BAR 180 OF shortcut oTempFoxRef.PrintResults()
		ON SELECTION BAR 190 OF shortcut oTempFoxRef.ExportResults()
		ON SELECTION BAR 210 OF shortcut oTempFoxRef.Options()
		
		ACTIVATE POPUP shortcut
		
		RELEASE POPUP shortcut
		
		
	ENDPROC

	PROCEDURE sortby
		* Abstract:
		*   Sort on a specific column.
		*
		* Parameters:
		*   <cColumn> = column to sort on
		*	[lNoRefresh] = TRUE to not refresh
		LPARAMETERS cColumn, lNoRefresh
		
		IF VARTYPE(cColumn) <> 'C'
			cColumn = THIS.cSortBy
		ENDIF
		
		THIS.cSortExtraColumns = ''
		
		cColumn = UPPER(cColumn)
		DO CASE
		CASE cColumn == "CHECKED"
			THIS.cSortColumns = "Checked DESCEND, SortFolder, FileTable.Filename, RefTable.LineNo"
		
		CASE cColumn == "CLASS"
			THIS.cSortColumns = "ClassNameSort, ProcNameSort, FileTable.Filename, RefTable.LineNo"
			THIS.cSortExtraColumns = "PADR(RefTable.ClassName, 100) AS ClassNameSort, PADR(RefTable.ProcName, 100) AS ProcNameSort"
		
		CASE cColumn == "METHOD"
			THIS.cSortColumns = "MethodNameSort, ClassNameSort, FileTable.Filename, RefTable.LineNo"
			THIS.cSortExtraColumns = "PADR(IIF('.' $ RefTable.ProcName, JUSTEXT(RefTable.ProcName), RefTable.ProcName), 100) AS MethodNameSort, PADR(RefTable.ClassName, 100) AS ClassNameSort"
		
		CASE cColumn == "FILENAME"
			THIS.cSortColumns = "FileTable.Filename, SortFolder, RefTable.LineNo"
		
		CASE cColumn == "LOCATION"
			THIS.cSortColumns = "SortFolder, FileTable.Filename, RefTable.LineNo"
		
		CASE cColumn == "LINENO"
			THIS.cSortColumns = "RefTable.LineNo, SortFolder, FileTable.Filename"
		
		CASE cColumn == "FILETYPE"
			THIS.cSortColumns = "SortFileType, FileTable.Filename, RefTable.LineNo"
		
		OTHERWISE
			THIS.cSortColumns = "FileTable.Folder, FileTable.Filename, RefTable.LineNo"
			THIS.cSortBy = "FILENAME"
		ENDCASE
		
		THIS.cSortBy = cColumn
		
		IF !EMPTY(cColumn) AND !lNoRefresh
			THIS.LoadResults(THIS.cCurrentRefType, THIS.cCurrentSetID, THIS.cCurrentFileID)
		
		*!*		THIS.cEvent = "SORT"
		*!*		THIS.tmrEvent.Enabled= .T.
		ENDIF
		
		
	ENDPROC

	PROCEDURE striptabs
		#include "foxref.h"
		LPARAMETERS cAbstract
		
		m.cAbstract = ALLTRIM(CHRTRAN(RTRIM(m.cAbstract), TAB, ' '))
		
		RETURN LEFT(m.cAbstract, MAX_LINE_LENGTH)
		
		
	ENDPROC

	PROCEDURE switchpanes
		* Switch from one pane to the next
		LPARAMETERS oSourcePane
		
		IF VARTYPE(oSourcePane) <> 'O'
			THIS.oTree.SetFocus()
		ELSE
			IF oSourcePane.Name = "oTree"
				THIS.grdResults.SetFocus()
			ELSE
				THIS.oTree.SetFocus()
			ENDIF
		ENDIF
			
	ENDPROC

	PROCEDURE synctree
		* Sync tree to current SetID
		FOR EACH oNode IN THIS.oTree.Nodes
			IF SUBSTR(oNode.Key, 3, 10) == THIS.cCurrentSetID
				oNode.Selected = .T.
				oNode.EnsureVisible()
				EXIT
			ENDIF
		ENDFOR
		
		
	ENDPROC

	PROCEDURE togglealwaysontop
		* Change the AlwaysOnTop property for the form
		THIS.AlwaysOnTop = !THIS.AlwaysOnTop
	ENDPROC

	PROCEDURE togglecolumn
		* Toggle display of columns
		LPARAMETERS cColumn
		
		DO CASE
		CASE cColumn == "SYMBOL"
			THIS.lShowColumnSymbol = !THIS.lShowColumnSymbol
		CASE cColumn == "ABSTRACT"
			THIS.lShowColumnAbstract = !THIS.lShowColumnAbstract
		ENDCASE
		
		IF TYPE("THIS.grdResults.colSymbol") == 'O' AND !ISNULL(THIS.grdResults.colSymbol)
			THIS.grdResults.colSymbol.Header1.Visible = THIS.lShowColumnSymbol
			THIS.grdResults.colSymbol.Text1.Visible = THIS.lShowColumnSymbol
			THIS.grdResults.colSymbol.Visible = THIS.lShowColumnSymbol
		ENDIF
		
	ENDPROC

	PROCEDURE toggledetails
		* Toggle displaying the details
		THIS.oBrowser.Visible = !THIS.oBrowser.Visible
		IF THIS.oBrowser.Visible
			THIS.ShowDetail(, .T.)
		ENDIF
		THIS.shpSplitterHor.Visible = THIS.oBrowser.Visible
		THIS.ResizeForm(.T.)
		
	ENDPROC

	PROCEDURE togglesortmostrecent
		THIS.oFoxRef.SortMostRecentFirst = !THIS.oFoxRef.SortMostRecentFirst
		THIS.SetRefTable(THIS.oFoxRef.cSetID, .F.)
	ENDPROC

	PROCEDURE treerightclickmenu
		#include "foxref.h"
		LPARAMETERS nRow, nCol
		LOCAL oTempFoxRef
		
		* so that we can use it in our ON SELECTION BAR command
		oTempFoxRef = THISFORM
		
		IF VARTYPE(nRow) <> 'N' OR VARTYPE(nCol) <> 'N'
			nRow = MROW("")
			nCol = MCOL("")
		ENDIF
		
		DEFINE POPUP shortcut SHORTCUT RELATIVE FROM nRow, nCol IN WINDOW "Screen"
		
		IF !EMPTY(THIS.cCurrentFileID)
			DEFINE BAR 1 OF shortcut PROMPT MENU_OPEN_LOC PICTRES _mfi_open STYLE "B"
		ENDIF
		DEFINE BAR 2 OF shortcut PROMPT MENU_COPY_LOC PICTRES _med_copy
		IF THIS.oTree.Nodes.Count > 1
			DEFINE BAR 3 OF shortcut PROMPT "\-"
			DEFINE BAR 4 OF shortcut PROMPT MENU_EXPANDALL_LOC
			DEFINE BAR 5 OF shortcut PROMPT MENU_COLLAPSEALL_LOC
			DEFINE BAR 6 OF shortcut PROMPT MENU_SORTMOSTRECENT_LOC
		ENDIF
		DEFINE BAR 7 OF shortcut PROMPT "\-"
		DEFINE BAR 8 OF shortcut PROMPT MENU_CLEAR_LOC SKIP FOR EMPTY(oTempFoxRef.cCurrentSetID)
		DEFINE BAR 9 OF shortcut PROMPT MENU_CLEARALL_LOC
		DEFINE BAR 10 OF shortcut PROMPT MENU_REFRESH_LOC PICTURE "bitmaps\refresh.bmp"
		
		IF THIS.oFoxRef.SortMostRecentFirst
			SET MARK OF BAR 6 OF shortcut TO .T.
		ENDIF
		
		
		IF !EMPTY(THIS.cCurrentFileID)
			ON SELECTION BAR 1 OF shortcut oTempFoxRef.GotoReference()
		ENDIF
		
		ON SELECTION BAR 2 OF shortcut oTempFoxRef.CopyReference()
		IF THIS.oTree.Nodes.Count > 1
			ON SELECTION BAR 4 OF shortcut oTempFoxRef.ExpandAll()
			ON SELECTION BAR 5 OF shortcut oTempFoxRef.CollapseAll()
		ENDIF
		ON SELECTION BAR 6 OF shortcut oTempFoxRef.ToggleSortMostRecent()
		ON SELECTION BAR 8 OF shortcut oTempFoxRef.ClearResults(.F.)
		ON SELECTION BAR 9 OF shortcut oTempFoxRef.ClearResults(.T.)
		ON SELECTION BAR 10 OF shortcut oTempFoxRef.RefreshResults()
		
		
		ACTIVATE POPUP shortcut
		
		RELEASE POPUP shortcut
		
	ENDPROC

	PROCEDURE updatecheckmarks
		* Abstract:
		*   Copy checkmarks from FoxRefCursor to underlying table.
		*
		* Parameters:
		*	[lClear] = clear all checkmarks
		LPARAMETERS lClear
		LOCAL nSelect
		LOCAL cAlias
		
		nSelect = SELECT()
		
		cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
		IF !USED(cAlias)
			USE (THIS.oFoxRef.RefTable) IN 0 SHARED AGAIN ALIAS (m.cAlias)
		ENDIF
		
		IF !lClear AND USED("FoxRefCursor")
			SELECT (m.cAlias)
			SET ORDER TO RefID
			SELECT FoxRefCursor
			SCAN ALL FOR !ISNULL(Checked)
				IF SEEK(FoxRefCursor.RefID, m.cAlias, "RefID")
					SELECT (m.cAlias)
					SCAN REST WHILE RefID == FoxRefCursor.RefID
						IF Checked <> FoxRefCursor.Checked
							REPLACE Checked WITH FoxRefCursor.Checked IN (m.cAlias)
						ENDIF
					ENDSCAN
				ENDIF
			ENDSCAN
		ELSE
			UPDATE (THIS.oFoxRef.RefTable) SET Checked = .F. WHERE !ISNULL(Checked) AND Checked
		ENDIF
		
		
		SELECT (nSelect)
		
	ENDPROC

	PROCEDURE updatecontrols
		* Abstract:
		*   Called to update the buttons, etc on the form.
		*
		* Parameters:
		*	None
		
		THIS.cmdRefresh.Enabled = THIS.oTree.Nodes.Count > 1
		THIS.cmdReplace.Enabled = THIS.oTree.Nodes.Count > 1
		THIS.cmdPrint.Enabled = THIS.oTree.Nodes.Count > 1
		THIS.cmdExport.Enabled = THIS.oTree.Nodes.Count > 1
		
	ENDPROC

	PROCEDURE updategrid
		#include "foxref.h"
		LPARAMETERS oNode
		LOCAL cRefType
		LOCAL cNodeLevel
		LOCAL cSetID
		
		IF VARTYPE(oNode) <> 'O'
			oNode = THIS.oTree.SelectedItem
		ENDIF
		
		IF VARTYPE(oNode) == 'O'
			cRefType   = LEFT(oNode.Key, 1)
			cNodeLevel = SUBSTR(oNode.Key, 2, 1)
		
			IF cRefType == REFTYPE_LOG
				cSetID = SUBSTR(oNode.Key, 3, 10)
				THIS.LoadResults(cRefType, cSetID)
			ELSE
				DO CASE
				CASE cNodeLevel == '0'
					THIS.LoadResults(REFTYPE_SEARCH)
		
				CASE cNodeLevel == '1'
					cSetID = SUBSTR(oNode.Key, 3, 10)
					THIS.LoadResults(cRefType, cSetID)
		
				CASE cNodeLevel == '2'
					cSetID = SUBSTR(oNode.Key, 3, 10)
					THIS.LoadResults(cRefType, cSetID, SUBSTR(oNode.Key, 13))
				ENDCASE
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE cmdExport.Click
		THIS.Parent.ExportResults()
		
		
		
	ENDPROC

	PROCEDURE cmdFind.Click
		THIS.Parent.Search()
		
		
	ENDPROC

	PROCEDURE cmdHelp.Click
		THIS.Parent.ShowHelp()
		
		
		
		
	ENDPROC

	PROCEDURE cmdOpen.Click
		#include "foxpro.h"
		#include "foxref.h"
		LOCAL cProjectFile
		LOCAL oErr
		LOCAL lSuccess
		
		cProjectFile = GETFILE("PJX")
		IF !EMPTY(cProjectFile)
			lSuccess = .T.
			TRY
				MODIFY PROJECT (cProjectFile) NOWAIT
		
			CATCH TO oErr
				lSuccess = .F.
				MESSAGEBOX(oErr.Message, MB_ICONEXCLAMATION, THISFORM.Caption)
			ENDTRY
			IF lSuccess
				IF THISFORM.oFoxRef.SetProject(cProjectFile)
					THISFORM.SetRefTable(THISFORM.oFoxRef.cSetID, .F.)
				ENDIF
			ENDIF
		ENDIF
		
		THISFORM.Show()
		
	ENDPROC

	PROCEDURE cmdOpen.GotFocus
		DODEFAULT()
		
		THIS.Parent.cmdOpenDropdown.VisualEffect= 1
		
	ENDPROC

	PROCEDURE cmdOpen.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF (nKeyCode = 93 and nShiftAltCtrl = 1) OR (nKeyCode = 160 and nShiftAltCtrl = 4)
			* THIS.Parent.cmdOpenDropdown.Click
			NODEFAULT
		ENDIF
		
	ENDPROC

	PROCEDURE cmdOpen.LostFocus
		DODEFAULT()
		
		THIS.Parent.cmdOpenDropdown.VisualEffect= 0
		
	ENDPROC

	PROCEDURE cmdOpen.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
		THIS.Parent.cmdOpenDropdown.VisualEffect= 1
		
	ENDPROC

	PROCEDURE cmdOpen.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
		THIS.Parent.cmdOpenDropdown.VisualEffect= 0
		
	ENDPROC

	PROCEDURE cmdOpenDropdown.Click
		#include "foxref.h"
		LOCAL nBar
		LOCAL cProjName
		LOCAL nProjectIndex
		LOCAL cExecCommand
		LOCAL cProjectFile
		LOCAL oTempFoxRef
		
		DODEFAULT()
		
		m.cProjectFile = THISFORM.oFoxRef.ProjectFile && save current set so we know if it changed or not
		
		* so that we can use it in our ON SELECTION BAR command
		oTempFoxRef = THISFORM.oFoxRef
		
		m.nRow = MROW('')
		m.nCol = MCOL('')
		DEFINE POPUP shortcut SHORTCUT RELATIVE FROM m.nRow, m.nCol IN WINDOW "Screen"
		
		* DEFINE POPUP shortcut SHORTCUT FROM WLROW(THISFORM.Name) + ((THIS.Height + THIS.Top + SYSMETRIC(9) + SYSMETRIC(4)) / FONTMETRIC(1)), WLCOL(THISFORM.Name) + (THIS.Left + SYSMETRIC(3))/(FONTMETRIC(6))
		
		nBar = 1
		FOR nProjectIndex = 1 TO Application.Projects.Count
			cProjName = LOWER(Application.Projects(nProjectIndex).Name)
			cExecCommand = "oTempFoxRef.SetProject([" + cProjName + "])"
		
			DEFINE BAR (nBar) OF shortcut PROMPT cProjName
			ON SELECTION BAR (nBar) OF shortcut &cExecCommand
		
			IF cProjName == LOWER(THISFORM.oFoxRef.ProjectFile)
				SET MARK OF BAR (nBar) OF shortcut TO .T.
			ENDIF
		
			nBar = nBar + 1	
		ENDFOR
		
		IF nBar > 1
			DEFINE BAR (nBar) OF shortcut PROMPT "\-"
			nBar = nBar + 1
		ENDIF
		
		DEFINE BAR (nBar) OF shortcut PROMPT SCOPE_FOLDER_LOC
		ON SELECTION BAR (nBar) OF shortcut oTempFoxRef.SetProject(PROJECT_GLOBAL)
		IF PROJECT_GLOBAL == THISFORM.oFoxRef.ProjectFile
			SET MARK OF BAR (nBar) OF shortcut TO .T.
		ENDIF
		
		
		ACTIVATE POPUP shortcut
		
		RELEASE POPUP shortcut
		
		IF !(THISFORM.oFoxRef.ProjectFile == m.cProjectFile)
			THISFORM.SetRefTable(THISFORM.oFoxRef.cSetID, .F.)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdOpenDropdown.GotFocus
		DODEFAULT()
		
		THIS.Parent.cmdOpen.VisualEffect= 1
		
	ENDPROC

	PROCEDURE cmdOpenDropdown.LostFocus
		DODEFAULT()
		
		THIS.Parent.cmdOpen.VisualEffect= 0
		
	ENDPROC

	PROCEDURE cmdOpenDropdown.MouseEnter
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
		THIS.Parent.cmdOpen.VisualEffect= 1
		
	ENDPROC

	PROCEDURE cmdOpenDropdown.MouseLeave
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		DODEFAULT(nButton, nShift, nXCoord, nYCoord)
		
		THIS.Parent.cmdOpen.VisualEffect= 0
		
	ENDPROC

	PROCEDURE cmdOptions.Click
		THIS.Parent.Options()
		
		
		
	ENDPROC

	PROCEDURE cmdPrint.Click
		THIS.Parent.PrintResults()
		
		
		
	ENDPROC

	PROCEDURE cmdRefresh.Click
		THIS.Parent.RefreshResults()
		
	ENDPROC

	PROCEDURE cmdReplace.Click
		THIS.Parent.GlobalReplace()
		
		
	ENDPROC

	PROCEDURE oTree.Click
		*** ActiveX Control Event ***
		
	ENDPROC

	PROCEDURE oTree.DblClick
		*** ActiveX Control Event ***
		IF !EMPTY(THISFORM.cCurrentFileID)
			THISFORM.GotoReference()
		ENDIF
		
	ENDPROC

	PROCEDURE oTree.Expand
		*** ActiveX Control Event ***
		LPARAMETERS oNode
		
		THIS.Parent.ExpandNode(oNode)
		
		
	ENDPROC

	PROCEDURE oTree.Init
		THIS.AddProperty("lRightClick", .F.)
	ENDPROC

	PROCEDURE oTree.KeyDown
		*** ActiveX Control Event ***
		LPARAMETERS keycode, shift
		LOCAL nTop
		LOCAL nLeft
		
		DO CASE
		CASE (keycode=121 and shift=1) OR (keycode=93 and shift=0)
			THISFORM.ScaleMode = 0
			nTop = WLROW(THISFORM.Name) + THIS.Top + ((SYSMETRIC(9) + SYSMETRIC(4)) / FONTMETRIC(1))
			nLeft = WLCOL(THISFORM.Name) + THIS.Left + (SYSMETRIC(3) / FONTMETRIC(6))
			THISFORM.ScaleMode = 3
		
			THISFORM.TreeRightClickMenu(nTop, nLeft)
		
		CASE (keycode=46 and shift=0)  && delete key
			THIS.Parent.ClearNode()
		
		CASE PCOUNT() == 2 AND shift = 0
			DO CASE
			CASE keycode = 13    && enter
				IF !EMPTY(THISFORM.cCurrentFileID)
					THISFORM.GotoReference()
				ENDIF
		
			CASE keycode = 116   && F5
				THISFORM.KeyPress(-4)
		
			CASE keycode = 117   && F6
				THISFORM.SwitchPanes(THIS)
			ENDCASE		
		
		ENDCASE
		
		
	ENDPROC

	PROCEDURE oTree.KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS keyascii
		
		DO CASE
		CASE keyascii == 27
			THISFORM.KeyPress(keyascii)
		ENDCASE
		
	ENDPROC

	PROCEDURE oTree.MouseDown
		*** ActiveX Control Event ***
		LPARAMETERS button, shift, x, y
		
		THIS.lRightClick = (Button == 2)
		
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		#include "foxref.h"
		LPARAMETERS oNode
		
		IF VARTYPE(oNode) == 'O'
			THIS.Parent.UpdateGrid(oNode)
		ENDIF
		
		IF THIS.lRightClick
			THIS.lRightClick = .F.
		
			THISFORM.cEvent = "RIGHTCLICKMENU"
			THISFORM.tmrEvent.Enabled = .T.
		ENDIF
		
	ENDPROC

	PROCEDURE shpSplitter.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton == 1
			IF BETWEEN(nXCoord, 20, THIS.Parent.Width - 50)
				THIS.left = nXCoord
				THIS.Parent.ResizeForm(.T.)
			ENDIF	
		ENDIF
		
	ENDPROC

	PROCEDURE shpSplitterHor.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		
		IF nButton == 1
			IF BETWEEN(nYCoord, 100, THIS.Parent.Height - 20)
				THIS.Top = nYCoord
				THIS.Parent.ResizeForm(.T.)
			ENDIF	
		ENDIF
		
	ENDPROC

	PROCEDURE tmrEvent.Timer
		THIS.Enabled = .F.
		THIS.Reset()
		
		
		IF !THIS.Parent.lInEvent
			m.lInEvent = .T.
			
			
			DO CASE
			CASE THIS.Parent.cEvent = "RIGHTCLICKMENU"
				THISFORM.TreeRightClickMenu()
		
			CASE THIS.Parent.cEvent = "SORT" OR THIS.Parent.cEvent = "REFRESH"
				THIS.Parent.LoadResults(THIS.Parent.cCurrentRefType, THIS.Parent.cCurrentSetID, THIS.Parent.cCurrentFileID)
			ENDCASE
		
			m.lInEvent = .F.
		ENDIF
		
	ENDPROC

ENDDEFINE
